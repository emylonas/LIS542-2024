default namespace = "http://www.wwp.northeastern.edu/ns/textbase"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace ns2 = "http://www.isocat.org/ns/dcr"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace sqf = "http://www.schematron-quickfix.com/validator/process"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2022-03-01T23:56:27Z. .
# TEI Edition: Version 4.4.0a. Last updated on
#         24th February 2022, revision ebd03a847
# TEI Edition Location: https://www.tei-c.org/Vault/P5/Version 4.4.0a./
#  Women Writers Project storage schema — main schema used for data capture and storage of WWO textbase. 

# © 2008 Northeastern University Women Writers Project  
# 
# Creative Commons Attribution-ShareAlike 4.0 International
# CC BY-SA 4.0
#
ws_macro.paraContent =
  (text
   | ws_model.gLike
   | ws_model.phrase
   | ws_model.inter
   | ws_model.global
   | ws_lg
   | ws_model.lLike)*
ws_macro.limitedContent =
  (text | ws_model.limitedPhrase | ws_model.inter)*
ws_macro.phraseSeq =
  (text
   | ws_model.gLike
   | ws_model.attributable
   | ws_model.phrase
   | ws_model.global)*
ws_macro.phraseSeq.limited =
  (text | ws_model.limitedPhrase | ws_model.global)*
ws_macro.specialPara =
  (text
   | ws_model.gLike
   | ws_model.phrase
   | ws_model.inter
   | ws_model.divPart
   | ws_model.global)*
ws_macro.xtext = (text | ws_model.gLike)*
ws_macro.noteContent =
  (ws_model.global*,
   ((ws_model.noteTop, ws_model.global*)*,
    ((ws_model.notePart, ws_model.global*)+,
     (ws_model.noteBottom, ws_model.global*)*)))
  | (ws_byline, ws_model.global*)+
anyElement-fallback =
  element * - (tei:* | teix:egXML) {
    attribute * { text }*,
    (text | anyElement-fallback)*
  }
ws_att.anchoring.attributes =
  ws_att.anchoring.attribute.anchored,
  ws_att.anchoring.attribute.targetEnd
ws_att.anchoring.attribute.anchored =
  ## (anchored) indicates whether the copy text shows the exact place of reference for the note.
  [ a:defaultValue = "true" ] attribute anchored { xsd:boolean }?
ws_att.anchoring.attribute.targetEnd =
  ## (target end) points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.
  attribute targetEnd {
    list { xsd:anyURI+ }
  }?
ws_att.ascribed.attributes = ws_att.ascribed.attribute.who
ws_att.ascribed.attribute.who =
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { xsd:anyURI+ }
  }?
ws_att.ascribed.directed.attributes =
  ws_att.ascribed.attributes, ws_att.ascribed.directed.attribute.toWhom
ws_att.ascribed.directed.attribute.toWhom =
  ## indicates the person, or group of people, to whom a speech act or action is directed.
  attribute toWhom {
    list { xsd:anyURI+ }
  }?
ws_att.canonical.attributes =
  ws_att.canonical.attribute.key, ws_att.canonical.attribute.ref
ws_att.canonical.attribute.key =
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { xsd:string }?
ws_att.canonical.attribute.ref =
  ## (reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.
  attribute ref {
    list { xsd:anyURI+ }
  }?
ws_att.dimensions.attributes =
  ws_att.dimensions.attribute.unit,
  ws_att.dimensions.attribute.quantity,
  ws_att.dimensions.attribute.extent,
  ws_att.dimensions.attribute.precision,
  ws_att.dimensions.attribute.scope
ws_att.dimensions.attribute.unit =
  ## names the unit used for the measurement
  ## Suggested values include: 1] cm (centimetres); 2] mm (millimetres); 3] in (inches); 4] line; 5] char (characters)
  attribute unit {
    ## (centimetres) 
    "cm" | ## (millimetres) 
      "mm" | ## (inches) 
      "in" | ## lines of text
      "line" | ## (characters) characters of text
      "char"
    | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.dimensions.attribute.quantity =
  ## specifies the length in the units specified
  attribute quantity {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
ws_att.dimensions.attribute.extent =
  ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words.
  attribute extent { xsd:string }?
ws_att.dimensions.attribute.precision =
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision {
    "high" | "medium" | "low" | "unknown"
  }?
ws_att.dimensions.attribute.scope =
  ## where the measurement summarizes more than one observation, specifies the applicability of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.written.attributes = ws_att.written.attribute.hand
ws_att.written.attribute.hand =
  [
    a:documentation [
      "points to a "
      ns1:code [ "<handNote>" ]
      " element describing the hand considered responsible for the content of the element concerned."
    ]
  ]
  attribute hand { xsd:anyURI }?
ws_att.damaged.attributes =
  ws_att.dimensions.attributes,
  ws_att.written.attributes,
  ws_att.damaged.attribute.agent,
  ws_att.damaged.attribute.degree,
  ws_att.damaged.attribute.group
ws_att.damaged.attribute.agent =
  ## categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
  attribute agent {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.damaged.attribute.degree =
  [
    a:documentation [
      "provides a coded representation of the degree of damage, either as a number between 0 (undamaged) and 1 (very extensively damaged), or as one of the codes high, medium, low, or unknown. The "
      ns1:code [ "<damage>" ]
      " element with the "
      ns1:code [ "@degree" ]
      " attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as "
      ns1:code [ "<supplied>" ]
      "."
    ]
  ]
  attribute degree {
    xsd:double
    | (
       "high" | "medium" | "low" | "unknown")
  }?
ws_att.damaged.attribute.group =
  ## assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon.
  attribute group { xsd:nonNegativeInteger }?
ws_att.breaking.attributes = ws_att.breaking.attribute.break
ws_att.breaking.attribute.break =
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.datable.w3c.attributes =
  ws_att.datable.w3c.attribute.when,
  ws_att.datable.w3c.attribute.notBefore,
  ws_att.datable.w3c.attribute.notAfter,
  ws_att.datable.w3c.attribute.from,
  ws_att.datable.w3c.attribute.to
ws_att.datable.w3c.attribute.when =
  ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
  attribute when {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
ws_att.datable.w3c.attribute.notBefore =
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
ws_att.datable.w3c.attribute.notAfter =
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
ws_att.datable.w3c.attribute.from =
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
ws_att.datable.w3c.attribute.to =
  ## indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.
  attribute to {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
sch:pattern [
  id =
    "wwp-store-att.datable.w3c-att-datable-w3c-when-constraint-rule-1"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@when]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notBefore|@notAfter|@from|@to"
      role = "nonfatal"
      "The @when attribute cannot be used with any other att.datable.w3c attributes."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id =
    "wwp-store-att.datable.w3c-att-datable-w3c-from-constraint-rule-2"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@from]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notBefore"
      role = "nonfatal"
      "The @from and @notBefore attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "wwp-store-att.datable.w3c-att-datable-w3c-to-constraint-rule-3"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@to]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notAfter"
      role = "nonfatal"
      "The @to and @notAfter attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.datable.attributes =
  ws_att.datable.w3c.attributes,
  ws_att.datable.iso.attributes,
  ws_att.datable.custom.attributes,
  ws_att.datable.attribute.calendar,
  ws_att.datable.attribute.period
ws_att.datable.attribute.calendar =
  ## indicates one or more systems or calendars to which the date represented by the content of this element belongs.
  attribute calendar {
    list { xsd:anyURI+ }
  }?
sch:pattern [
  id = "wwp-store-att.datable-calendar-calendar-constraint-rule-5"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@calendar]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "string-length(.) gt 0"
      " @calendar indicates one or more systems or calendars to\x{a}" ~
      "              which the date represented by the content of this element belongs, but this\x{a}" ~
      "              "
      sch:name [ ]
      " element has no textual content."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.datable.attribute.period =
  [
    a:documentation [
      "supplies pointers to one or more definitions of named periods of time (typically "
      ns1:code [ "<category>" ]
      "s or "
      ns1:code [ "<calendar>" ]
      "s) within which the datable item is understood to have occurred."
    ]
  ]
  attribute period {
    list { xsd:anyURI+ }
  }?
sch:pattern [
  id =
    "wwp-store-att.datable-calendar_points_to_calendar-constraint-rule-4"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "*[@calendar]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "/wwp:TEI/wwp:teiHeader/wwp:profileDesc/wwp:calendarDesc/wwp:calendar/@xml:id = substring( normalize-space(@calendar), 2 )"
      "The @calendar attribute of "
      sch:value-of [ select = "name(.)" ]
      " should point to a "
      tei:gi [ "calendar" ]
      ' element, but this one ("'
      sch:value-of [ select = "normalize-space(@calendar)" ]
      '") does not; this error will always occur unless you perform XInclude processing before validation (to do so in oXygen check “Enable XInclude Processing” in the XML / XML Parser / XInclude Options preferences pane)'
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.datcat.attributes =
  ws_att.datcat.attribute.datcat, ws_att.datcat.attribute.valueDatcat
ws_att.datcat.attribute.datcat =
  ## contains a PID (persistent identifier) that aligns the given element with the appropriate Data Category (or categories) in ISOcat.
  attribute ns2:datcat {
    list { xsd:anyURI+ }
  }?
ws_att.datcat.attribute.valueDatcat =
  ## contains a PID (persistent identifier) that aligns the content of the given element or the value of the given attribute with the appropriate simple Data Category (or categories) in ISOcat.
  attribute ns2:valueDatcat {
    list { xsd:anyURI+ }
  }?
ws_att.declarable.attributes = ws_att.declarable.attribute.default
ws_att.declarable.attribute.default =
  ## indicates whether or not this element is selected by default when its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    ## This element is selected if its parent is selected
    "true" | ## This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
ws_att.declaring.attributes =
  ws_att.declaring.attribute.author, ws_att.declaring.attribute.decls
ws_att.declaring.attribute.author =
  ## Suggested values include: 1] p:tbd-female (to be determined, female); 2] p:tbd-male (to be determined, male); 3] p:tbd (to be determined); 4] p:unknown-female; 5] p:unknown-male; 6] p:unknown.zzx; 7] p:collective
  attribute author {
    list {
      (
       ## (to be determined, female) We are confident this author is a woman, but have yet to figure out exactly who she is.
       "p:tbd-female" | ## (to be determined, male) We are confident this author is a man, but have yet to figure out exactly who he is.
         "p:tbd-male" | ## (to be determined) We do not know who this author is, but expect (or at least hope) to find out in the near future.
         "p:tbd" | ## We do not know who this author is, but are reasonably confident she is a woman. While it is possible her identity is ascertained in the future, we are not expecting it.
         "p:unknown-female" | ## We do not know who this author is, but are reasonably confident he is a man. While it is possible his identity is ascertained in the future, we are not expecting it.
         "p:unknown-male" | ## We do not know how this author is. While it is possible his or her identity is ascertained in the future, we are not expecting it.
         "p:unknown.zzx" | ## Used to indicate that authorship is attributed to a collection of individuals, sex unspecified.
         "p:collective"
       | xsd:anyURI),
      (
       ## (to be determined, female) We are confident this author is a woman, but have yet to figure out exactly who she is.
       "p:tbd-female" | ## (to be determined, male) We are confident this author is a man, but have yet to figure out exactly who he is.
         "p:tbd-male" | ## (to be determined) We do not know who this author is, but expect (or at least hope) to find out in the near future.
         "p:tbd" | ## We do not know who this author is, but are reasonably confident she is a woman. While it is possible her identity is ascertained in the future, we are not expecting it.
         "p:unknown-female" | ## We do not know who this author is, but are reasonably confident he is a man. While it is possible his identity is ascertained in the future, we are not expecting it.
         "p:unknown-male" | ## We do not know how this author is. While it is possible his or her identity is ascertained in the future, we are not expecting it.
         "p:unknown.zzx" | ## Used to indicate that authorship is attributed to a collection of individuals, sex unspecified.
         "p:collective"
       | xsd:anyURI)?,
      (
       ## (to be determined, female) We are confident this author is a woman, but have yet to figure out exactly who she is.
       "p:tbd-female" | ## (to be determined, male) We are confident this author is a man, but have yet to figure out exactly who he is.
         "p:tbd-male" | ## (to be determined) We do not know who this author is, but expect (or at least hope) to find out in the near future.
         "p:tbd" | ## We do not know who this author is, but are reasonably confident she is a woman. While it is possible her identity is ascertained in the future, we are not expecting it.
         "p:unknown-female" | ## We do not know who this author is, but are reasonably confident he is a man. While it is possible his identity is ascertained in the future, we are not expecting it.
         "p:unknown-male" | ## We do not know how this author is. While it is possible his or her identity is ascertained in the future, we are not expecting it.
         "p:unknown.zzx" | ## Used to indicate that authorship is attributed to a collection of individuals, sex unspecified.
         "p:collective"
       | xsd:anyURI)?,
      (
       ## (to be determined, female) We are confident this author is a woman, but have yet to figure out exactly who she is.
       "p:tbd-female" | ## (to be determined, male) We are confident this author is a man, but have yet to figure out exactly who he is.
         "p:tbd-male" | ## (to be determined) We do not know who this author is, but expect (or at least hope) to find out in the near future.
         "p:tbd" | ## We do not know who this author is, but are reasonably confident she is a woman. While it is possible her identity is ascertained in the future, we are not expecting it.
         "p:unknown-female" | ## We do not know who this author is, but are reasonably confident he is a man. While it is possible his identity is ascertained in the future, we are not expecting it.
         "p:unknown-male" | ## We do not know how this author is. While it is possible his or her identity is ascertained in the future, we are not expecting it.
         "p:unknown.zzx" | ## Used to indicate that authorship is attributed to a collection of individuals, sex unspecified.
         "p:collective"
       | xsd:anyURI)?,
      (
       ## (to be determined, female) We are confident this author is a woman, but have yet to figure out exactly who she is.
       "p:tbd-female" | ## (to be determined, male) We are confident this author is a man, but have yet to figure out exactly who he is.
         "p:tbd-male" | ## (to be determined) We do not know who this author is, but expect (or at least hope) to find out in the near future.
         "p:tbd" | ## We do not know who this author is, but are reasonably confident she is a woman. While it is possible her identity is ascertained in the future, we are not expecting it.
         "p:unknown-female" | ## We do not know who this author is, but are reasonably confident he is a man. While it is possible his identity is ascertained in the future, we are not expecting it.
         "p:unknown-male" | ## We do not know how this author is. While it is possible his or her identity is ascertained in the future, we are not expecting it.
         "p:unknown.zzx" | ## Used to indicate that authorship is attributed to a collection of individuals, sex unspecified.
         "p:collective"
       | xsd:anyURI)?,
      (
       ## (to be determined, female) We are confident this author is a woman, but have yet to figure out exactly who she is.
       "p:tbd-female" | ## (to be determined, male) We are confident this author is a man, but have yet to figure out exactly who he is.
         "p:tbd-male" | ## (to be determined) We do not know who this author is, but expect (or at least hope) to find out in the near future.
         "p:tbd" | ## We do not know who this author is, but are reasonably confident she is a woman. While it is possible her identity is ascertained in the future, we are not expecting it.
         "p:unknown-female" | ## We do not know who this author is, but are reasonably confident he is a man. While it is possible his identity is ascertained in the future, we are not expecting it.
         "p:unknown-male" | ## We do not know how this author is. While it is possible his or her identity is ascertained in the future, we are not expecting it.
         "p:unknown.zzx" | ## Used to indicate that authorship is attributed to a collection of individuals, sex unspecified.
         "p:collective"
       | xsd:anyURI)?,
      (
       ## (to be determined, female) We are confident this author is a woman, but have yet to figure out exactly who she is.
       "p:tbd-female" | ## (to be determined, male) We are confident this author is a man, but have yet to figure out exactly who he is.
         "p:tbd-male" | ## (to be determined) We do not know who this author is, but expect (or at least hope) to find out in the near future.
         "p:tbd" | ## We do not know who this author is, but are reasonably confident she is a woman. While it is possible her identity is ascertained in the future, we are not expecting it.
         "p:unknown-female" | ## We do not know who this author is, but are reasonably confident he is a man. While it is possible his identity is ascertained in the future, we are not expecting it.
         "p:unknown-male" | ## We do not know how this author is. While it is possible his or her identity is ascertained in the future, we are not expecting it.
         "p:unknown.zzx" | ## Used to indicate that authorship is attributed to a collection of individuals, sex unspecified.
         "p:collective"
       | xsd:anyURI)?
    }
  }?
ws_att.declaring.attribute.decls =
  ## identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { xsd:anyURI+ }
  }?
ws_att.fragmentable.attributes = ws_att.fragmentable.attribute.part
ws_att.fragmentable.attribute.part =
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    ## (yes) the element is fragmented in some (unspecified) respect
    "Y" | ## (no) the element is not fragmented, or no claim is made as to its completeness
      "N" | ## (initial) this is the initial part of a fragmented element
      "I" | ## (medial) this is a medial part of a fragmented element
      "M" | ## (final) this is the final part of a fragmented element
      "F"
  }?
ws_att.divLike.attributes =
  ws_att.fragmentable.attributes,
  ws_att.divLike.attribute.org,
  ws_att.divLike.attribute.sample
ws_att.divLike.attribute.org =
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    ## no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.
    "composite" | ## the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.
      "uniform"
  }?
ws_att.divLike.attribute.sample =
  ## indicates whether this division is a sample of the original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    ## division lacks material present at end in source.
    "initial" | ## division lacks material at start and end.
      "medial" | ## division lacks material at start.
      "final" | ## position of sampled material within original unknown.
      "unknown" | ## division is not a sample.
      "complete"
  }?
ws_att.docStatus.attributes = ws_att.docStatus.attribute.status
ws_att.docStatus.attribute.status =
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ]
  attribute status {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.global.responsibility.attributes =
  ws_att.global.responsibility.attribute.cert,
  ws_att.global.responsibility.attribute.resp
ws_att.global.responsibility.attribute.cert =
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert {
    xsd:double
    | (
       "high" | "medium" | "low" | "unknown")
  }?
ws_att.global.responsibility.attribute.resp =
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.
  attribute resp {
    list { xsd:anyURI+ }
  }?
ws_att.editLike.attributes =
  ws_att.editLike.attribute.evidence, ws_att.editLike.attribute.instant
ws_att.editLike.attribute.evidence =
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal" | ## there is external evidence to support the intervention.
         "external" | ## the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.
         "conjecture"
       | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" })+
    }
  }?
ws_att.editLike.attribute.instant =
  ## indicates whether this is an instant revision or not.
  [ a:defaultValue = "false" ]
  attribute instant {
    xsd:boolean
    | (
       "unknown" | "inapplicable")
  }?
ws_att.global.rendition.attributes =
  ws_att.global.rendition.attribute.rend,
  ws_att.global.rendition.attribute.style,
  ws_att.global.rendition.attribute.rendition
ws_att.global.rendition.attribute.rend =
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.global.rendition.attribute.style =
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text
  attribute style { xsd:string }?
ws_att.global.rendition.attribute.rendition =
  ## points to a description of the rendering or presentation used for this element in the source text.
  attribute rendition {
    list { xsd:anyURI+ }
  }?
ws_att.global.source.attributes = ws_att.global.source.attribute.source
ws_att.global.source.attribute.source =
  ## specifies the source from which some aspect of this element is drawn.
  attribute source {
    list { xsd:anyURI+ }
  }?
ws_att.global.attributes =
  ws_att.global.rendition.attributes,
  ws_att.global.linking.attributes,
  ws_att.global.change.attributes,
  ws_att.global.responsibility.attributes,
  ws_att.global.source.attributes,
  ws_att.global.attribute.xmlid,
  ws_att.global.attribute.n,
  ws_att.global.attribute.xmllang,
  ws_att.global.attribute.xmlbase,
  ws_att.global.attribute.xmlspace
ws_att.global.attribute.xmlid =
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
ws_att.global.attribute.n =
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within the document.
  attribute n { xsd:string }?
ws_att.global.attribute.xmllang =
  [
    a:documentation [
      "(language) indicates the language of the element content using a tag generated according to "
      ns1:a [
        href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
        "BCP 47"
      ]
      "."
    ]
  ]
  attribute xml:lang {
    xsd:language
    | (
       "")
  }?
ws_att.global.attribute.xmlbase =
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { xsd:anyURI }?
ws_att.global.attribute.xmlspace =
  ## signals an intention about how white space should be managed by applications.
  attribute xml:space {
    ## signals that the application's default white-space processing modes are acceptable
    "default" | ## indicates the intent that applications preserve all white space
      "preserve"
  }?
sch:pattern [
  id = "wwp-store-att.global-xmlID-is-unique-constraint-rule-6"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@xml:id"
    "\x{a}" ~
    "         "
    sch:let [ name = "thisID" value = "normalize-space(.)" ]
    "\x{a}" ~
    "         "
    sch:report [
      test =
        "../(ancestor::*|preceding::*)/@xml:id[ normalize-space(.) eq $thisID ]                                  "
      'The @xml:id "'
      sch:value-of [ select = "$thisID" ]
      '" on <'
      sch:value-of [ select = "name(..)" ]
      "> duplicates an @xml:id found earlier in the document"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.handFeatures.attributes =
  ws_att.handFeatures.attribute.scribe,
  ws_att.handFeatures.attribute.scribeRef,
  ws_att.handFeatures.attribute.script,
  ws_att.handFeatures.attribute.scriptRef,
  ws_att.handFeatures.attribute.medium,
  ws_att.handFeatures.attribute.scope
ws_att.handFeatures.attribute.scribe =
  ## gives a name or other identifier for the scribe believed to be responsible for this hand.
  attribute scribe { xsd:Name }?
ws_att.handFeatures.attribute.scribeRef =
  [
    a:documentation [
      "points to a full description of the scribe concerned, typically supplied by a "
      ns1:code [ "<person>" ]
      " element elsewhere in the description."
    ]
  ]
  attribute scribeRef {
    list { xsd:anyURI+ }
  }?
ws_att.handFeatures.attribute.script =
  ## characterizes the particular script or writing style used by this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { xsd:Name+ }
  }?
ws_att.handFeatures.attribute.scriptRef =
  [
    a:documentation [
      "points to a full description of the script or writing style used by this hand, typically supplied by a "
      ns1:code [ "<scriptNote>" ]
      " element elsewhere in the description."
    ]
  ]
  attribute scriptRef {
    list { xsd:anyURI+ }
  }?
ws_att.handFeatures.attribute.medium =
  ## describes the tint or type of ink, e.g. brown, or other writing medium, e.g. pencil
  attribute medium {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.handFeatures.attribute.scope =
  ## specifies how widely this hand is used in the manuscript.
  attribute scope {
    ## only this hand is used throughout the manuscript
    "sole" | ## this hand is used through most of the manuscript
      "major" | ## this hand is used occasionally in the manuscript
      "minor"
  }?
ws_att.internetMedia.attributes =
  ws_att.internetMedia.attribute.mimeType
ws_att.internetMedia.attribute.mimeType =
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.media.attributes =
  ws_att.internetMedia.attributes,
  ws_att.media.attribute.width,
  ws_att.media.attribute.height,
  ws_att.media.attribute.scale
ws_att.media.attribute.width =
  ## Where the media are displayed, indicates the display width
  attribute width {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
ws_att.media.attribute.height =
  ## Where the media are displayed, indicates the display height
  attribute height {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
ws_att.media.attribute.scale =
  ## Where the media are displayed, indicates a scale factor to be applied when generating the desired display size
  attribute scale {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
ws_att.resourced.attributes = ws_att.resourced.attribute.url
ws_att.resourced.attribute.url =
  ## (uniform resource locator) specifies the URL from which the media concerned may be obtained.
  attribute url { xsd:anyURI }
ws_att.measurement.attributes =
  ws_att.measurement.attribute.unit,
  ws_att.measurement.attribute.unitRef,
  ws_att.measurement.attribute.quantity,
  ws_att.measurement.attribute.commodity
ws_att.measurement.attribute.unit =
  ## (unit) indicates the units used for the measurement, usually using the standard symbol for the desired units.
  attribute unit {
    ## leaves
    "page" | ## (metre) SI base unit of length
      "m" | ## (kilogram) SI base unit of mass
      "kg" | ## (second) SI base unit of time
      "s" | ## (ampere) SI base unit of electric current
      "A" | ## (kelvin) SI base unit of thermodynamic temperature
      "K" | ## (mole) SI base unit of amount of substance
      "mol" | ## (candela) SI base unit of luminous intensity
      "cd" | ## (radian) SI unit of plane angle
      "rad" | ## (steradian) SI unit of solid angle
      "sr" | ## (hertz) SI unit of frequency
      "Hz" | ## (newton) SI unit of force
      "N" | ## (pascal) SI unit of pressure or stress
      "Pa" | ## (joule) SI unit of energy or work
      "J" | ## (watt) SI unit of power or radiant flux
      "W" | ## (coulomb) SI unit of electric charge or quantity of electricity
      "C" | ## (volt) SI unit of electric potential difference or electromotive force
      "V" | ## (farad) SI unit of capacitance
      "F" | ## (ohm) SI unit of electric resistance
      "Ω" | ## (siemens) SI unit of electric conductance
      "S" | ## (weber) SI unit of magnetic flux
      "Wb" | ## (tesla) SI unit of magnetic flux density
      "T" | ## (henry) SI unit of inductance
      "H" | ## (degree Celsius) SI unit of Celsius temperature
      "℃" | ## (lumen) SI unit of luminous flux
      "lm" | ## (lux) SI unit of illuminance
      "lx" | ## (becquerel) SI unit of activity (referred to a radionuclide
      "Bq" | ## (gray) SI unit of absorbed dose or specific energy (imparted)
      "Gy" | ## (sievert) SI unit of dose equivalent, ambient dose equivalent, directional dose equivalent, personal dose equivalent, or organ equivalent dose
      "Sv" | ## (minute) 60 s
      "min" | ## (hour) 3600 s
      "h" | ## (day) 86 400 s
      "d" | ## (degree) 
      "°" | ## (minute) 
      "′" | ## (second) 
      "″" | ## (litre) 1 dm³
      "L" | ## (tonne) 10³ kg
      "t" | ## (bel) values of (base 10) logarithmic quantities including sound pressure level
      "bel" | ## (neper) similar to the bel, but uses natural logarithms
      "Np" | ## (electron volt) ~1.6×10⁻¹⁹ J
      "eV" | ## (unified atomic mass unit) a Dalton, or Da; ~1.7×10⁻²⁷ kg
      "u" | ## (atronomical unit) ~1.5×10¹¹ m
      "ua" | ## (are) 1 dam²
      "a" | ## (hectare) 1 hm²
      "ha" | ## (bar) 10⁵ Pa
      "bar" | ## (ångström) 10⁻¹⁰ m
      "Å" | ## (gram) unit of mass
      "g" | ## (millilitre) 
      "mL" | ## (centimetre) 
      "cm" | ## (decibel) see remarks, below
      "dB" | ## (nanosecond) 
      "ns" | ## (kilobit) 10³ or 1000 bits
      "kbit" | ## (kibibit) 2¹⁰ or 1024 bits
      "Kibit" | ## (megabit) 10⁶ or 1 000 000 bits
      "Mbit" | ## (mebibit) 2²⁰ or 1 048 576 bits
      "Mibit" | ## (gigabit) 10⁹ or 1 000 000 000 bits
      "Gbit" | ## (gibibit) 2³⁰ or 1 073 741 824 bits
      "Gibit" | ## (terabit) 10¹² bits
      "Tbit" | ## (tebibit) 2⁴⁰ bits
      "Tibit" | ## (kilobyte) 10³ or 1000 bytes
      "kB" | ## (kibibyte) 2¹⁰ or 1024 bytes
      "KiB" | ## (megabyte) 10⁶ or 1 000 000 bytes
      "MB" | ## (mebibyte) 2²⁰ or 1 048 576 bytes
      "MiB" | ## (gigabyte) 10⁹ or 1 000 000 000 bytes
      "GB" | ## (gibibyte) 2³⁰ or 1 073 741 824 bytes
      "GiB" | ## (terabyte) 10¹² bytes
      "TB" | ## (tebibyte) 2⁴⁰ bytes
      "TiB"
  }?
ws_att.measurement.attribute.unitRef =
  [
    a:documentation [
      "points to a unique identifier stored in the "
      ns1:code [ "@xml:id" ]
      " of a "
      ns1:code [ "<unitDef>" ]
      " element that defines a unit of measure."
    ]
  ]
  attribute unitRef { xsd:anyURI }?
ws_att.measurement.attribute.quantity =
  ## (quantity) specifies the number of the specified units that comprise the measurement
  attribute quantity {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
ws_att.measurement.attribute.commodity =
  ## (commodity) indicates the substance that is being measured
  attribute commodity {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
sch:pattern [
  id =
    "wwp-store-att.measurement-att-measurement-unitRef-constraint-rule-7"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@unitRef]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@unit"
      role = "info"
      "The @unit attribute may be unnecessary when @unitRef is present."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.naming.attributes =
  ws_att.canonical.attributes,
  ws_att.naming.attribute.role,
  ws_att.naming.attribute.nymRef
ws_att.naming.attribute.role =
  ## may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place.
  attribute role {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.naming.attribute.nymRef =
  ## (reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.
  attribute nymRef {
    list { xsd:anyURI+ }
  }?
ws_att.notated.attributes = ws_att.notated.attribute.notation
ws_att.notated.attribute.notation =
  ## names the notation used for the content of the element.
  attribute notation {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.typed.attributes =
  ws_att.typed.attribute.type, ws_att.typed.attribute.subtype
ws_att.typed.attribute.type =
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.typed.attribute.subtype =
  ## (subtype) provides a sub-categorization of the element, if needed
  attribute subtype {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
sch:pattern [
  id = "wwp-store-att.typed-subtypeTyped-constraint-rule-8"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@subtype]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@type"
      "The "
      sch:name [ ]
      " element should not be categorized in detail with @subtype unless also categorized in general with @type"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.pointing.attributes =
  ws_att.pointing.attribute.targetLang,
  ws_att.pointing.attribute.target,
  ws_att.pointing.attribute.evaluate
ws_att.pointing.attribute.targetLang =
  [
    a:documentation [
      "specifies the language of the content to be found at the destination referenced by "
      ns1:code [ "@target" ]
      ", using a language tag generated according to "
      ns1:a [
        href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
        "BCP 47"
      ]
      "."
    ]
  ]
  attribute targetLang {
    xsd:language
    | (
       "")
  }?
sch:pattern [
  id = "wwp-store-att.pointing-targetLang-targetLang-constraint-rule-9"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[not(self::tei:schemaSpec)][@targetLang]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@target"
      "@targetLang should only be used on "
      sch:name [ ]
      " if @target is specified."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.pointing.attribute.target =
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { xsd:anyURI+ }
  }?
ws_att.pointing.attribute.evaluate =
  ## (evaluate) specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all" | ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one" | ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
ws_att.pointing.group.attributes =
  ws_att.pointing.attributes,
  ws_att.typed.attributes,
  ws_att.pointing.group.attribute.domains,
  ws_att.pointing.group.attribute.targFunc
ws_att.pointing.group.attribute.domains =
  ## optionally specifies the identifiers of the elements within which all elements indicated by the contents of this element lie.
  attribute domains {
    list { xsd:anyURI, xsd:anyURI, xsd:anyURI* }
  }?
ws_att.pointing.group.attribute.targFunc =
  [
    a:documentation [
      "(target function) describes the function of each of the values of the "
      ns1:code [ "@target" ]
      " attribute of the enclosed "
      ns1:code [ "<link>" ]
      ", "
      ns1:code [ "<join>" ]
      ", or "
      ns1:code [ "<alt>" ]
      " tags."
    ]
  ]
  attribute targFunc {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" },
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" },
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }*
    }
  }?
ws_att.segLike.attributes =
  ws_att.datcat.attributes,
  ws_att.fragmentable.attributes,
  ws_att.segLike.attribute.function
ws_att.segLike.attribute.function =
  ## (function) characterizes the function of the segment.
  attribute function {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.sortable.attributes = ws_att.sortable.attribute.sortKey
ws_att.sortable.attribute.sortKey =
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.edition.attributes =
  ws_att.edition.attribute.ed, ws_att.edition.attribute.edRef
ws_att.edition.attribute.ed =
  ## (edition) supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.edition.attribute.edRef =
  ## (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { xsd:anyURI+ }
  }?
ws_att.spanning.attributes = ws_att.spanning.attribute.spanTo
ws_att.spanning.attribute.spanTo =
  ## indicates the end of a span initiated by the element bearing this attribute.
  attribute spanTo { xsd:anyURI }?
sch:pattern [
  id =
    "wwp-store-att.spanning-spanTo-spanTo-to-anchor-constraint-rule-10"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "wwp:*[@spanTo]"
    "\x{a}" ~
    "         "
    sch:let [ name = "spanTo" value = "substring(@spanTo,2)" ]
    "\x{a}" ~
    "         "
    sch:let [ name = "spanEnd" value = "id( $spanTo )" ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "$spanEnd/self::wwp:anchor"
      "\x{a}" ~
      "                      The @spanTo of "
      tei:gi [
        "\x{a}" ~
        "               "
        sch:name [ ]
        "\x{a}" ~
        "            "
      ]
      " must point to an "
      tei:gi [ "anchor" ]
      "; this one ("
      tei:val [
        "\x{a}" ~
        "               "
        sch:value-of [ select = "@spanTo" ]
        "\x{a}" ~
        "            "
      ]
      ") points to a "
      tei:gi [
        "\x{a}" ~
        "               "
        sch:value-of [ select = "local-name($spanEnd)" ]
        "\x{a}" ~
        "            "
      ]
      ".\x{a}" ~
      "                    "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.styleDef.attribute.schemeVersion =
  [
    a:documentation [
      "supplies a version number for the style language provided in "
      ns1:code [ "@scheme" ]
      "."
    ]
  ]
  attribute schemeVersion {
    xsd:token { pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}" }
  }?
sch:pattern [
  id =
    "wwp-store-att.styleDef-schemeVersion-schemeVersionRequiresScheme-constraint-rule-11"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@schemeVersion]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@scheme and not(@scheme = 'free')"
      "\x{a}" ~
      "              @schemeVersion can only be used if @scheme is specified.\x{a}" ~
      "            "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
ws_att.transcriptional.attributes =
  ws_att.editLike.attributes,
  ws_att.written.attributes,
  ws_att.transcriptional.attribute.cause,
  ws_att.transcriptional.attribute.seq
ws_att.transcriptional.attribute.cause =
  ## documents the presumed cause for the intervention.
  attribute cause {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.transcriptional.attribute.seq =
  ## (sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:nonNegativeInteger }?
ws_att.citing.attributes =
  ws_att.citing.attribute.unit,
  ws_att.citing.attribute.from,
  ws_att.citing.attribute.to
ws_att.citing.attribute.unit =
  ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume, entry.
  ## Suggested values include: 1] volume (volume); 2] issue; 3] page (page); 4] line; 5] chapter (chapter); 6] part; 7] column; 8] entry
  attribute unit {
    ## (volume) the element contains a volume number.
    "volume" | ## the element contains an issue number, or volume and issue numbers.
      "issue" | ## (page) the element contains a page number or page range.
      "page" | ## the element contains a line number or line range.
      "line" | ## (chapter) the element contains a chapter indication (number and/or title)
      "chapter" | ## the element identifies a part of a book or collection.
      "part" | ## the element identifies a column.
      "column" | ## the element identifies an entry number or label in a list of entries.
      "entry"
    | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.citing.attribute.from =
  [
    a:documentation [
      "specifies the starting point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute from {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_att.citing.attribute.to =
  [
    a:documentation [
      "specifies the end-point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute to {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?
ws_model.nameLike.agent = ws_name | ws_orgName | ws_persName
ws_model.nameLike.agent_alternation = ws_name | ws_orgName | ws_persName
ws_model.nameLike.agent_sequence = ws_name, ws_orgName, ws_persName
ws_model.nameLike.agent_sequenceOptional =
  ws_name?, ws_orgName?, ws_persName?
ws_model.nameLike.agent_sequenceOptionalRepeatable =
  ws_name*, ws_orgName*, ws_persName*
ws_model.nameLike.agent_sequenceRepeatable =
  ws_name+, ws_orgName+, ws_persName+
ws_model.segLike = ws_seg
ws_model.hiLike = ws_hi | ws_q | ws_mcr
ws_model.hiLike_alternation = ws_hi | ws_q | ws_mcr
ws_model.hiLike_sequence = ws_hi, ws_q, ws_mcr
ws_model.hiLike_sequenceOptional = ws_hi?, ws_q?, ws_mcr?
ws_model.hiLike_sequenceOptionalRepeatable = ws_hi*, ws_q*, ws_mcr*
ws_model.hiLike_sequenceRepeatable = ws_hi+, ws_q+, ws_mcr+
ws_model.emphLike =
  ws_foreign
  | ws_emph
  | ws_distinct
  | ws_mentioned
  | ws_soCalled
  | ws_gloss
  | ws_term
  | ws_title
  | ws_code
  | ws_ident
ws_model.emphLike_alternation =
  ws_foreign
  | ws_emph
  | ws_distinct
  | ws_mentioned
  | ws_soCalled
  | ws_gloss
  | ws_term
  | ws_title
  | ws_code
  | ws_ident
ws_model.emphLike_sequence =
  ws_foreign,
  ws_emph,
  ws_distinct,
  ws_mentioned,
  ws_soCalled,
  ws_gloss,
  ws_term,
  ws_title,
  ws_code,
  ws_ident
ws_model.emphLike_sequenceOptional =
  ws_foreign?,
  ws_emph?,
  ws_distinct?,
  ws_mentioned?,
  ws_soCalled?,
  ws_gloss?,
  ws_term?,
  ws_title?,
  ws_code?,
  ws_ident?
ws_model.emphLike_sequenceOptionalRepeatable =
  ws_foreign*,
  ws_emph*,
  ws_distinct*,
  ws_mentioned*,
  ws_soCalled*,
  ws_gloss*,
  ws_term*,
  ws_title*,
  ws_code*,
  ws_ident*
ws_model.emphLike_sequenceRepeatable =
  ws_foreign+,
  ws_emph+,
  ws_distinct+,
  ws_mentioned+,
  ws_soCalled+,
  ws_gloss+,
  ws_term+,
  ws_title+,
  ws_code+,
  ws_ident+
ws_model.highlighted = ws_model.hiLike | ws_model.emphLike
ws_model.dateLike = ws_date | ws_time
ws_model.dateLike_alternation = ws_date | ws_time
ws_model.dateLike_sequence = ws_date, ws_time
ws_model.dateLike_sequenceOptional = ws_date?, ws_time?
ws_model.dateLike_sequenceOptionalRepeatable = ws_date*, ws_time*
ws_model.dateLike_sequenceRepeatable = ws_date+, ws_time+
ws_model.measureLike = ws_num | ws_measure | ws_height | ws_width
ws_model.measureLike_alternation =
  ws_num | ws_measure | ws_height | ws_width
ws_model.measureLike_sequence = ws_num, ws_measure, ws_height, ws_width
ws_model.measureLike_sequenceOptional =
  ws_num?, ws_measure?, ws_height?, ws_width?
ws_model.measureLike_sequenceOptionalRepeatable =
  ws_num*, ws_measure*, ws_height*, ws_width*
ws_model.measureLike_sequenceRepeatable =
  ws_num+, ws_measure+, ws_height+, ws_width+
ws_model.egLike = notAllowed
ws_model.egLike_alternation = notAllowed
ws_model.egLike_sequence = empty
ws_model.egLike_sequenceOptional = empty
ws_model.egLike_sequenceOptionalRepeatable = empty
ws_model.egLike_sequenceRepeatable = notAllowed
ws_model.graphicLike = ws_graphic
ws_model.offsetLike = notAllowed
ws_model.offsetLike_alternation = notAllowed
ws_model.offsetLike_sequence = empty
ws_model.offsetLike_sequenceOptional = empty
ws_model.offsetLike_sequenceOptionalRepeatable = empty
ws_model.offsetLike_sequenceRepeatable = notAllowed
ws_model.pPart.msdesc = ws_dimensions
ws_model.pPart.editorial =
  ws_choice | ws_abbr | ws_expan | ws_ex | ws_am | ws_subst
ws_model.pPart.editorial_alternation =
  ws_choice | ws_abbr | ws_expan | ws_ex | ws_am | ws_subst
ws_model.pPart.editorial_sequence =
  ws_choice, ws_abbr, ws_expan, ws_ex, ws_am, ws_subst
ws_model.pPart.editorial_sequenceOptional =
  ws_choice?, ws_abbr?, ws_expan?, ws_ex?, ws_am?, ws_subst?
ws_model.pPart.editorial_sequenceOptionalRepeatable =
  ws_choice*, ws_abbr*, ws_expan*, ws_ex*, ws_am*, ws_subst*
ws_model.pPart.editorial_sequenceRepeatable =
  ws_choice+, ws_abbr+, ws_expan+, ws_ex+, ws_am+, ws_subst+
ws_model.pPart.transcriptional =
  ws_sic
  | ws_corr
  | ws_reg
  | ws_orig
  | ws_del
  | ws_unclear
  | ws_handShift
  | ws_supplied
  | ws_surplus
  | ws_mod
  | ws_redo
  | ws_undo
  | ws_regMe
  | ws_vuji
ws_model.pPart.transcriptional_alternation =
  ws_sic
  | ws_corr
  | ws_reg
  | ws_orig
  | ws_del
  | ws_unclear
  | ws_handShift
  | ws_supplied
  | ws_surplus
  | ws_mod
  | ws_redo
  | ws_undo
  | ws_regMe
  | ws_vuji
ws_model.pPart.transcriptional_sequence =
  ws_sic,
  ws_corr,
  ws_reg,
  ws_orig,
  ws_del,
  ws_unclear,
  ws_handShift,
  ws_supplied,
  ws_surplus,
  ws_mod,
  ws_redo,
  ws_undo,
  ws_regMe,
  ws_vuji
ws_model.pPart.transcriptional_sequenceOptional =
  ws_sic?,
  ws_corr?,
  ws_reg?,
  ws_orig?,
  ws_del?,
  ws_unclear?,
  ws_handShift?,
  ws_supplied?,
  ws_surplus?,
  ws_mod?,
  ws_redo?,
  ws_undo?,
  ws_regMe?,
  ws_vuji?
ws_model.pPart.transcriptional_sequenceOptionalRepeatable =
  ws_sic*,
  ws_corr*,
  ws_reg*,
  ws_orig*,
  ws_del*,
  ws_unclear*,
  ws_handShift*,
  ws_supplied*,
  ws_surplus*,
  ws_mod*,
  ws_redo*,
  ws_undo*,
  ws_regMe*,
  ws_vuji*
ws_model.pPart.transcriptional_sequenceRepeatable =
  ws_sic+,
  ws_corr+,
  ws_reg+,
  ws_orig+,
  ws_del+,
  ws_unclear+,
  ws_handShift+,
  ws_supplied+,
  ws_surplus+,
  ws_mod+,
  ws_redo+,
  ws_undo+,
  ws_regMe+,
  ws_vuji+
ws_model.pPart.edit =
  ws_model.pPart.editorial | ws_model.pPart.transcriptional
ws_model.linePart =
  ws_model.hiLike
  | ws_choice
  | ws_del
  | ws_unclear
  | ws_seg
  | ws_handShift
  | ws_line
  | ws_mod
  | ws_redo
  | ws_undo
ws_model.ptrLike = ws_ptr | ws_ref
ws_model.lPart = notAllowed
ws_model.global.meta =
  ws_link | ws_alt | ws_substJoin | ws_listTranspose
ws_model.milestoneLike =
  ws_milestone | ws_pb | ws_lb | ws_cb | ws_anchor | ws_fw
ws_model.gLike = ws_g
ws_model.oddDecl = notAllowed
ws_model.oddDecl_alternation = notAllowed
ws_model.oddDecl_sequence = empty
ws_model.oddDecl_sequenceOptional = empty
ws_model.oddDecl_sequenceOptionalRepeatable = empty
ws_model.oddDecl_sequenceRepeatable = notAllowed
ws_model.phrase.xml = ws_att | ws_gi | ws_tag | ws_val
ws_model.specDescLike = notAllowed
ws_model.biblLike = ws_bibl | ws_biblStruct | ws_listBibl
ws_model.biblLike_alternation = ws_bibl | ws_biblStruct | ws_listBibl
ws_model.biblLike_sequence = ws_bibl, ws_biblStruct, ws_listBibl
ws_model.biblLike_sequenceOptional =
  ws_bibl?, ws_biblStruct?, ws_listBibl?
ws_model.biblLike_sequenceOptionalRepeatable =
  ws_bibl*, ws_biblStruct*, ws_listBibl*
ws_model.biblLike_sequenceRepeatable =
  ws_bibl+, ws_biblStruct+, ws_listBibl+
ws_model.headLike = ws_head
ws_model.headLike_alternation = ws_head
ws_model.headLike_sequence = ws_head
ws_model.headLike_sequenceOptional = ws_head?
ws_model.headLike_sequenceOptionalRepeatable = ws_head*
ws_model.headLike_sequenceRepeatable = ws_head+
ws_model.labelLike = ws_desc | ws_label
ws_model.labelLike_alternation = ws_desc | ws_label
ws_model.labelLike_sequence = ws_desc, ws_label
ws_model.labelLike_sequenceOptional = ws_desc?, ws_label?
ws_model.labelLike_sequenceOptionalRepeatable = ws_desc*, ws_label*
ws_model.labelLike_sequenceRepeatable = ws_desc+, ws_label+
ws_model.listLike = ws_list | ws_table
ws_model.listLike_alternation = ws_list | ws_table
ws_model.listLike_sequence = ws_list, ws_table
ws_model.listLike_sequenceOptional = ws_list?, ws_table?
ws_model.listLike_sequenceOptionalRepeatable = ws_list*, ws_table*
ws_model.listLike_sequenceRepeatable = ws_list+, ws_table+
ws_model.noteLike = ws_note | ws_advertisement
ws_model.lLike = ws_l
ws_model.lLike_alternation = ws_l
ws_model.lLike_sequence = ws_l
ws_model.lLike_sequenceOptional = ws_l?
ws_model.lLike_sequenceOptionalRepeatable = ws_l*
ws_model.lLike_sequenceRepeatable = ws_l+
ws_model.pLike = ws_p | ws_ab
ws_model.pLike_alternation = ws_p | ws_ab
ws_model.pLike_sequence = ws_p, ws_ab
ws_model.pLike_sequenceOptional = ws_p?, ws_ab?
ws_model.pLike_sequenceOptionalRepeatable = ws_p*, ws_ab*
ws_model.pLike_sequenceRepeatable = ws_p+, ws_ab+
ws_model.stageLike = ws_stage
ws_model.stageLike_alternation = ws_stage
ws_model.stageLike_sequence = ws_stage
ws_model.stageLike_sequenceOptional = ws_stage?
ws_model.stageLike_sequenceOptionalRepeatable = ws_stage*
ws_model.stageLike_sequenceRepeatable = ws_stage+
ws_model.global.edit =
  ws_gap
  | ws_addSpan
  | ws_damageSpan
  | ws_delSpan
  | ws_space
  | ws_elision
ws_model.divPart =
  ws_model.lLike | ws_model.pLike | ws_lg | ws_sp | ws_spGrp
ws_model.placeNamePart = ws_placeName
ws_model.placeNamePart_alternation = ws_placeName
ws_model.placeNamePart_sequence = ws_placeName
ws_model.placeNamePart_sequenceOptional = ws_placeName?
ws_model.placeNamePart_sequenceOptionalRepeatable = ws_placeName*
ws_model.placeNamePart_sequenceRepeatable = ws_placeName+
ws_model.placeStateLike = ws_model.placeNamePart
ws_model.placeStateLike_alternation = ws_model.placeNamePart_alternation
ws_model.placeStateLike_sequence = ws_model.placeNamePart_sequence
ws_model.placeStateLike_sequenceOptional =
  ws_model.placeNamePart_sequenceOptional?
ws_model.placeStateLike_sequenceOptionalRepeatable =
  ws_model.placeNamePart_sequenceOptionalRepeatable*
ws_model.placeStateLike_sequenceRepeatable =
  ws_model.placeNamePart_sequenceRepeatable+
ws_model.publicationStmtPart.agency = ws_publisher
ws_model.publicationStmtPart.detail =
  ws_model.ptrLike
  | ws_address
  | ws_date
  | ws_pubPlace
  | ws_idno
  | ws_availability
  | ws_include
ws_model.availabilityPart = ws_licence
ws_model.certLike = notAllowed
ws_model.descLike = ws_desc
ws_model.quoteLike = ws_quote
ws_model.quoteLike_alternation = ws_quote
ws_model.quoteLike_sequence = ws_quote
ws_model.quoteLike_sequenceOptional = ws_quote?
ws_model.quoteLike_sequenceOptionalRepeatable = ws_quote*
ws_model.quoteLike_sequenceRepeatable = ws_quote+
ws_model.attributable = ws_model.quoteLike | ws_said | ws_floatingText
ws_model.attributable_alternation =
  ws_model.quoteLike_alternation | ws_said | ws_floatingText
ws_model.attributable_sequence =
  ws_model.quoteLike_sequence, ws_said, ws_floatingText
ws_model.attributable_sequenceOptional =
  ws_model.quoteLike_sequenceOptional?, ws_said?, ws_floatingText?
ws_model.attributable_sequenceOptionalRepeatable =
  ws_model.quoteLike_sequenceOptionalRepeatable*,
  ws_said*,
  ws_floatingText*
ws_model.attributable_sequenceRepeatable =
  ws_model.quoteLike_sequenceRepeatable+, ws_said+, ws_floatingText+
ws_model.respLike =
  ws_author
  | ws_editor
  | ws_respStmt
  | ws_sponsor
  | ws_funder
  | ws_translator
ws_model.divWrapper =
  ws_byline
  | ws_dateline
  | ws_argument
  | ws_epigraph
  | ws_docAuthor
  | ws_docDate
ws_model.divTopPart = ws_model.headLike | ws_opener
ws_model.divTop =
  ws_model.labelLike | ws_model.divWrapper | ws_model.divTopPart
ws_model.frontPart.drama = ws_set | ws_castList
ws_model.pLike.front =
  ws_head
  | ws_byline
  | ws_dateline
  | ws_argument
  | ws_epigraph
  | ws_titlePart
  | ws_docAuthor
  | ws_docEdition
  | ws_docImprint
  | ws_docDate
ws_model.divBottomPart = ws_trailer | ws_closer | ws_postscript
ws_model.divBottom = ws_model.divWrapper | ws_model.divBottomPart
ws_model.titlepagePart =
  ws_graphic
  | ws_byline
  | ws_argument
  | ws_epigraph
  | ws_titlePart
  | ws_docAuthor
  | ws_imprimatur
  | ws_docEdition
  | ws_docImprint
  | ws_docDate
  | ws_docAuthorization
  | ws_docSale
ws_model.imprintPart = ws_publisher | ws_biblScope | ws_pubPlace
ws_model.catDescPart = notAllowed
ws_model.castItemPart =
  ws_model.labelLike | ws_role | ws_roleDesc | ws_actor
ws_model.addressLike = ws_email | ws_address
ws_model.addressLike_alternation = ws_email | ws_address
ws_model.addressLike_sequence = ws_email, ws_address
ws_model.addressLike_sequenceOptional = ws_email?, ws_address?
ws_model.addressLike_sequenceOptionalRepeatable = ws_email*, ws_address*
ws_model.addressLike_sequenceRepeatable = ws_email+, ws_address+
ws_model.nameLike =
  ws_model.nameLike.agent
  | ws_model.offsetLike
  | ws_model.placeStateLike
  | ws_rs
  | ws_idno
  | ws_model.persNamePart
ws_model.nameLike_alternation =
  ws_model.nameLike.agent_alternation
  | ws_model.offsetLike_alternation
  | ws_model.placeStateLike_alternation
  | ws_rs
  | ws_idno
  | ws_model.persNamePart_alternation
ws_model.nameLike_sequence =
  ws_model.nameLike.agent_sequence,
  ws_model.offsetLike_sequence,
  ws_model.placeStateLike_sequence,
  ws_rs,
  ws_idno,
  ws_model.persNamePart_sequence
ws_model.nameLike_sequenceOptional =
  ws_model.nameLike.agent_sequenceOptional?,
  ws_model.offsetLike_sequenceOptional?,
  ws_model.placeStateLike_sequenceOptional?,
  ws_rs?,
  ws_idno?,
  ws_model.persNamePart_sequenceOptional?
ws_model.nameLike_sequenceOptionalRepeatable =
  ws_model.nameLike.agent_sequenceOptionalRepeatable*,
  ws_model.offsetLike_sequenceOptionalRepeatable*,
  ws_model.placeStateLike_sequenceOptionalRepeatable*,
  ws_rs*,
  ws_idno*,
  ws_model.persNamePart_sequenceOptionalRepeatable*
ws_model.nameLike_sequenceRepeatable =
  ws_model.nameLike.agent_sequenceRepeatable+,
  ws_model.offsetLike_sequenceRepeatable+,
  ws_model.placeStateLike_sequenceRepeatable+,
  ws_rs+,
  ws_idno+,
  ws_model.persNamePart_sequenceRepeatable+
ws_model.global =
  ws_model.global.meta
  | ws_model.milestoneLike
  | ws_model.noteLike
  | ws_model.global.edit
  | ws_add
  | ws_figure
  | ws_metamark
  | ws_unknown
ws_model.biblPart =
  ws_model.respLike
  | ws_model.imprintPart
  | ws_list
  | ws_series
  | ws_citedRange
  | ws_bibl
  | ws_edition
  | ws_extent
  | ws_availability
ws_model.frontPart =
  ws_model.frontPart.drama
  | ws_listBibl
  | ws_titlePage
  | ws_imprimatur
  | ws_docAuthorization
ws_model.addrPart = ws_model.nameLike | ws_addrLine
ws_model.pPart.data =
  ws_model.dateLike
  | ws_model.measureLike
  | ws_model.addressLike
  | ws_model.nameLike
ws_model.inter =
  ws_model.egLike
  | ws_model.oddDecl
  | ws_model.biblLike
  | ws_model.labelLike
  | ws_model.listLike
  | ws_model.stageLike
  | ws_model.attributable
  | ws_l
  | ws_lg
  | ws_castList
ws_model.common = ws_model.divPart | ws_model.inter | ws_q
ws_model.phrase =
  ws_model.segLike
  | ws_model.highlighted
  | ws_model.graphicLike
  | ws_model.pPart.msdesc
  | ws_model.pPart.edit
  | ws_model.ptrLike
  | ws_model.lPart
  | ws_model.phrase.xml
  | ws_model.specDescLike
  | ws_model.pPart.data
  | ws_author
ws_model.limitedPhrase =
  ws_model.hiLike
  | ws_model.emphLike
  | ws_model.pPart.msdesc
  | ws_model.pPart.editorial
  | ws_model.ptrLike
  | ws_model.phrase.xml
  | ws_model.pPart.data
ws_model.divLike = ws_div
ws_model.divGenLike = notAllowed
ws_model.div1Like = notAllowed
ws_model.teiHeaderPart = ws_encodingDesc | ws_profileDesc
ws_model.sourceDescPart = notAllowed
ws_model.encodingDescPart =
  ws_charDecl
  | ws_projectDesc
  | ws_samplingDecl
  | ws_editorialDecl
  | ws_tagsDecl
  | ws_listPrefixDef
  | ws_classDecl
  | ws_include
ws_model.editorialDeclPart =
  ws_correction | ws_normalization | ws_quotation | ws_hyphenation
ws_model.profileDescPart =
  ws_langUsage
  | ws_textClass
  | ws_calendarDesc
  | ws_handNotes
  | ws_listTranspose
  | ws_include
ws_model.resource = ws_text
ws_model.describedResource = ws_teiCorpus | ws_TEI
ws_att.personal.attributes =
  ws_att.naming.attributes,
  ws_att.personal.attribute.full,
  ws_att.personal.attribute.sort
ws_att.personal.attribute.full =
  ## indicates whether the name component is given in full, as an abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    ## (yes) the name component is spelled out in full.
    "yes" | ## (abbreviated) the name component is given in an abbreviated form.
      "abb" | ## (initial letter) the name component is indicated only by one initial.
      "init"
  }?
ws_att.personal.attribute.sort =
  ## (sort) specifies the sort order of the name component in relation to others within the name.
  attribute sort { xsd:nonNegativeInteger }?

ws_p =
  ## (paragraph) marks paragraphs in prose. [3.1. Paragraphs 7.2.5. Speech Contents]
  element p {
    ws_macro.paraContent
    >> sch:pattern [
         id =
           "wwp-store-p-abstractModel-structure-p-in-ab-or-p-constraint-report-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "    (ancestor::tei:ab or ancestor::tei:p)                          and not( ancestor::tei:floatingText                                 |parent::tei:exemplum                                 |parent::tei:item                                 |parent::tei:note                                 |parent::tei:q                                 |parent::tei:quote                                 |parent::tei:remarks                                 |parent::tei:said                                 |parent::tei:sp                                 |parent::tei:stage                                 |parent::tei:cell                                 |parent::tei:figure                                )"
             "\x{a}" ~
             "        Abstract model violation: Paragraphs may not occur inside other paragraphs or ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-p-abstractModel-structure-p-in-l-or-lg-constraint-report-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "    (ancestor::tei:l or ancestor::tei:lg)                          and not( ancestor::tei:floatingText                                 |parent::tei:figure                                 |parent::tei:note                                )"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab, unless p is a child of figure or note, or is a descendant of floatingText.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.declaring.attributes,
    ws_att.fragmentable.attributes,
    ws_att.written.attributes,
    empty
  }

ws_foreign =
  ## (foreign) identifies a word or phrase as belonging to some language other than that of the surrounding text. [3.3.2.1. Foreign Words or Expressions]
  element foreign {
    ws_macro.phraseSeq,
    ws_att.global.attribute.xmlid,
    ws_att.global.attribute.n,
    ws_att.global.attribute.xmlbase,
    ws_att.global.attribute.xmlspace,
    ws_att.global.rendition.attribute.rend,
    ws_att.global.rendition.attribute.style,
    ws_att.global.rendition.attribute.rendition,
    ws_att.global.linking.attribute.corresp,
    ws_att.global.linking.attribute.sameAs,
    ws_att.global.linking.attribute.next,
    ws_att.global.linking.attribute.prev,
    ws_att.global.change.attribute.change,
    ws_att.global.responsibility.attribute.cert,
    ws_att.global.responsibility.attribute.resp,
    ws_att.global.source.attribute.source,
    [
      a:documentation [
        "(language) indicates the language of the element content using a tag generated according to "
        ns1:a [
          href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
          "BCP 47"
        ]
        "."
      ]
    ]
    attribute xml:lang {
      xsd:language
      | (
         "")
    },
    empty
  }

ws_emph =
  ## (emphasized) marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]
  element emph { ws_macro.paraContent, ws_att.global.attributes, empty }

ws_hi =
  ## (highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]
  element hi {
    ws_macro.paraContent
    >> sch:pattern [
         id = "wwp-store-hi-some_must_have_rend-constraint-rule-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:hi | tei:mcr | tei:emph"
           "\x{a}" ~
           "               "
           sch:let [ name = "myName" value = "local-name(.)" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "myDefaultRendition"
             value =
               "/tei:TEI/tei:teiHeader/tei:encodingDesc/tei:tagsDecl/tei:rendition[ $myName = tokenize( @selector,'[ ,]+') ]"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "myRealRend"
             value = "concat( $myDefaultRendition, @rend )"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains( $myRealRend, '(')"
             "Wha? This "
             tei:gi [
               "\x{a}" ~
               "                     "
               sch:value-of [ select = "$myName" ]
               "\x{a}" ~
               "                  "
             ]
             " element has no (usable) rendition"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.written.attributes,
    empty
  }

ws_distinct =
  ## identifies any word or phrase which is regarded as linguistically distinct, for example as archaic, technical, dialectal, non-preferred, etc., or as forming part of a sublanguage. [3.3.2.3. Other Linguistically Distinct Material]
  element distinct {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ## specifies the sublanguage or register to which the word or phrase is being assigned
    attribute type {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    ## specifies how the phrase is distinct diachronically
    attribute time { xsd:string }?,
    ## specifies how the phrase is distinct diatopically
    attribute space { xsd:string }?,
    ## specifies how the phrase is distinct diastratically
    attribute social { xsd:string }?,
    empty
  }

ws_said =
  ## (speech or thought) indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. [3.3.3. Quotation]
  element said {
    ws_macro.specialPara,
    ws_att.global.attributes,
    ws_att.ascribed.directed.attributes,
    ## may be used to indicate whether the quoted matter is regarded as having been vocalized or signed.
    attribute aloud {
      xsd:boolean
      | (
         "unknown" | "inapplicable")
    }?,
    ## may be used to indicate whether the quoted matter is regarded as direct or indirect speech.
    [ a:defaultValue = "true" ]
    attribute direct {
      xsd:boolean
      | (
         "unknown" | "inapplicable")
    }?,
    empty
  }

ws_quote =
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3. Quotation 4.3.1. Grouped Texts]
  element quote {
    ws_macro.specialPara
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:quote[ starts-with( @cit,'#' ) ]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "//wwp:bibl[ @xml:id eq substring-after( current()/@cit,'#' ) ]"
             "cit= attribute of ＜"
             sch:name [ ]
             "＞ does not point to a ＜bibl＞."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:quote[ contains(@cit,'#') ]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "document( substring-before( @cit,'#') )//wwp:bibl[ @xml:id = substring-after( current()/@cit,'#') ]"
             "cit= attribute of ＜"
             sch:name [ ]
             "＞ does not point to a ＜bibl＞."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:quote[ @cit ]"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not( contains( @cit,'#') )"
             "cit= attribute of ＜"
             sch:name [ ]
             "＞ must point to particular ＜bibl＞ element via its xml:id="
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.msExcerpt.attributes,
    ws_att.notated.attributes,
    attribute type {
      ## the quoted material is changed from its original context in a deliberate way, possibly to fit into the text
      "adaptation" | ## the quotation is significantly different from the original text, and appears to be a deliberate parody
        "parody" | ## the quoted material has been re-ordered or otherwise significantly modified from the original in a deliberate fashion (other than a paraphrase or parody)
        "remix" | ## as of yet undeterminted
        "undetermined"
    }?,
    ## (prose citation reference) points to (one or more) bibliographic citation(s) for this quotation as they appear in the source
    attribute cit {
      list { xsd:anyURI+ }
    }?,
    empty
  }

ws_q =
  ## (quoted) contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. [3.3.3. Quotation]
  element q {
    ws_macro.specialPara,
    ws_att.global.attributes,
    ws_att.ascribed.directed.attributes,
    ## (type) may be used to indicate whether the quoted matter is spoken or thought, or to characterize it more finely.
    attribute type {
      ## representation of direct speech, usually marked by quotation marks.
      "spoken" | ## representation of thought, e.g. internal monologue.
        "thought"
    }?,
    empty
  }

ws_mentioned =
  ## marks words or phrases mentioned, not used. [3.3.3. Quotation]
  element mentioned {
    ws_macro.phraseSeq, ws_att.global.attributes, empty
  }

ws_soCalled =
  ## (so called) contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. [3.3.3. Quotation]
  element soCalled {
    ws_macro.phraseSeq, ws_att.global.attributes, empty
  }

ws_desc =
  ## (description) contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented.  [22.4.1. Description of Components]
  element desc {
    ws_macro.limitedContent
    >> sch:pattern [
         id =
           "wwp-store-desc-deprecationInfo-only-in-deprecated-constraint-rule-16"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:desc[ @type eq 'deprecationInfo']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "../@validUntil"
             "Information about a\x{a}" ~
             "        deprecation should only be present in a specification element\x{a}" ~
             "        that is being deprecated: that is, only an element that has a\x{a}" ~
             "        @validUntil attribute should have a child <desc\x{a}" ~
             '        type="deprecationInfo">.'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.translatable.attributes,
    ws_att.typed.attribute.subtype,
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Suggested values include: 1] deprecationInfo (deprecation information)
    attribute type {
      ## (deprecation
      ##           information) This element describes why or how its parent element is being deprecated, typically including recommendations for alternate encoding.
      "deprecationInfo"
      | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_gloss =
  ## (gloss) identifies a phrase or word used to provide a gloss or definition for some other word or phrase. [3.4.1. Terms and Glosses 22.4.1. Description of Components]
  element gloss {
    (ws_macro.phraseSeq, ws_quote*)+,
    ws_att.global.attributes,
    ws_att.declaring.attributes,
    ws_att.translatable.attributes,
    ws_att.typed.attributes,
    ws_att.pointing.attribute.targetLang,
    ws_att.pointing.attribute.evaluate,
    empty
  }

ws_term =
  ## (term) contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. [3.4.1. Terms and Glosses]
  element term {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.declaring.attributes,
    ws_att.pointing.attribute.targetLang,
    ws_att.pointing.attribute.evaluate,
    ws_att.typed.attributes,
    ws_att.canonical.attributes,
    ws_att.sortable.attributes,
    empty
  }

ws_sic =
  ## (Latin for thus or so) contains text reproduced although apparently incorrect or inaccurate. [3.5.1. Apparent Errors]
  element sic {
    ws_macro.paraContent
    >> sch:pattern [
         id =
           "wwp-store-sic-no_correction_of_erroneous_metawork-constraint-rule-17"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:sic[@type eq 'metawork']"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "parent::wwp:choice or (preceding-sibling::*[1]|following-sibling::*[1])[self::wwp:corr]"
             "At the WWP we do not correct metawork errors"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-sic-no_content_in_erroneous_metawork_flag-constraint-rule-18"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:sic[@type eq 'metawork']"
           "\x{a}" ~
           "               "
           sch:report [
             test = ".//* | .//text()[ normalize-space(.) != '']"
             "Metawork error flags should not have content"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    attribute type {
      [
        a:documentation [
          "used (on an empty "
          ns1:code [ "<sic>" ]
          " w/o a "
          ns1:code [ "<choice>" ]
          " parent) to indicate a missing piece of metawork"
        ]
      ]
      "metawork" | ## (sequencing) the error represents an error in the sequencing of some countable feature, e.g. pages or list items.
        "seq"
    }?,
    empty
  }

ws_corr =
  ## (correction) contains the correct form of a passage apparently erroneous in the copy text. [3.5.1. Apparent Errors]
  element corr {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.editLike.attributes,
    ws_att.typed.attributes,
    empty
  }

ws_choice =
  ## (choice) groups a number of alternative encodings for the same point in a text. [3.5. Simple Editorial Changes]
  element choice {
    ((ws_sic, ws_corr+)
     | (ws_abbr, ws_expan+)
     | (ws_orig, ws_reg+)
     | (ws_unclear, ws_unclear, ws_unclear*)
     | (ws_supplied, ws_supplied, ws_supplied*)),
    ws_att.global.attributes,
    empty
  }

ws_reg =
  ## (regularization) contains a reading which has been regularized or normalized in some sense. [3.5.2. Regularization and
  ## Normalization 12. Critical Apparatus]
  element reg {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.editLike.attributes,
    ws_att.typed.attributes,
    empty
  }

ws_orig =
  ## (original form) contains a reading which is marked as following the original, rather than being normalized or corrected. [3.5.2. Regularization and
  ## Normalization 12. Critical Apparatus]
  element orig {
    ws_macro.paraContent
    >> sch:pattern [
         id = "wwp-store-orig-orig-not-belong-constraint-report-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:orig"
           "\x{a}" ~
           "               "
           sch:report [
             test = "ancestor::wwp:mw"
             "An "
             tei:gi [ "orig" ]
             " should not be inside an "
             tei:gi [ "mw" ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "ancestor::wwp:orig"
             role = "warning"
             "Generally speaking, an "
             tei:gi [ "orig" ]
             " should not be within an "
             tei:gi [ "orig" ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    empty
  }

ws_gap =
  ## indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible.
  element gap {
    empty
    >> sch:pattern [
         id = "wwp-store-gap-gap-attr-combo-constraint-report-13"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:gap"
           "\x{a}" ~
           "               "
           sch:report [
             role = "error"
             test =
               "                                 (                                   @reason = ('damaged','deleted','obscured','flawed-reproduction','excerpt','other')                                   and                                   @desc = ('attachment','embossing')                                 )                                 or                                 ( @reason eq 'obscured'  and  @desc eq 'unknown' )                                 "
             'reason="'
             sch:value-of [ select = "@reason" ]
             '" and desc="'
             sch:value-of [ select = "@desc" ]
             '" of ＜gap＞ is an invalid combination'
           ]
           "\x{a}" ~
           "               "
           sch:report [
             role = "warning"
             test =
               "                                 (                                   @reason = ('deleted','flawed-reproduction','excerpt','omitted','other')                                   and                                   @desc eq 'unknown'                                 )                                 or                                 (                                   @reason eq 'other'  and  @desc = ('handwriting','printed')                                 )                                 "
             'are you sure the combination of reason="'
             sch:value-of [ select = "@reason" ]
             '" and desc="'
             sch:value-of [ select = "@desc" ]
             '" of ＜gap＞ makes sense?'
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             role = "error"
             test =
               "if ( @desc eq 'other' )                                 then id( substring( normalize-space( @corresp ), 2 ) )[self::wwp:note]                                   else true()"
             'When the description is just "other", there should be a '
             tei:gi [ "note" ]
             " explaining the gap (and @corresp should point to that note)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    attribute unit {
      ## (characters) characters of text
      "chars" | ## words, i.e. whitespace-separated tokens
        "words" | ## lines of text
        "lines" | ## pages, i.e. one side of a leaf
        "pages" | ## (centimetres) 
        "cm" | ## (millimetres) 
        "mm" | ## (inches) 
        "in"
    }?,
    ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words.
    attribute extent { xsd:string },
    attribute reason {
      ## the text has been damaged due to tearing, creasing, folding, fire, insects, etc.
      "damaged" | ## a portion of the text has been deliberately omitted from the larger document as determined by the WWP's editorial policy
        "excerpt" | ## for cases where the illegibility is caused by our reproduction of the text, and we have reason to believe the original is still legible (e.g. edges have been unintentionally cropped during copying or filming, under- or over-exposure, objects superimposed on the original when it was reproduced)
        "flawed-reproduction" | ## the page is intact but the original text is illegible for some reason other than deletion (e.g. water staining, uninked letters)
        "obscured" | ## for features which our policy is to ignore (bookplates, embossing, stamping, modern handwriting, etc.)
        "omitted" | ## used only when none of the above values are appropriate
        "other"
    },
    (
     ## in the case of text omitted from the transcription because of deliberate deletion by an identifiable hand, signifies the hand which made the deletion.
     attribute hand { xsd:anyURI }?)
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "*[ starts-with( @hand,'#') ]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "//wwp:handNote[ @xml:id = substring-after( current()/@hand,'#') ]"
             "hand= attribute of ＜"
             sch:name [ ]
             "＞ does not point to a ＜handNote＞ (local)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "*[ contains( @hand,'#') ]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "document( substring-before( @hand,'#') )                                 //wwp:handNote[ @xml:id = substring-after( current()/@hand,'#') ]"
             "hand= attribute of ＜"
             sch:name [ ]
             "＞ does not point to a ＜handNote＞ (external)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "*[@hand]"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(contains(@hand,'#'))"
             "hand=\x{a}" ~
             "                      attribute of ＜"
             sch:name [ ]
             "＞ must point to particular\x{a}" ~
             "                      ＜handNote＞ element via its xml:id="
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:gap[@hand|@agent|@degree|@group]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "substring-before( @reason, '-') ='damaged'"
             " The\x{a}" ~
             "                      hand=, agent=, degree=, and group= attributes of\x{a}" ~
             "                      ＜"
             sch:name [ ]
             "＞ should only be specified if the reason= attribute is one that\x{a}" ~
             "                      indicates damage in the source (i.e., starts with “damaged-”)."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    attribute desc {
      ## for anything stuck, glued, stapled, or otherwise affixed to the page (e.g. bookplates)
      "attachment" | ## for anything added to the page by embossing or other forms of pressure (including pricking holes in the page)
        "embossing" | ## for handwriting that has been added to the printed original
        "handwriting" | ## for text or images printed on the page
        "printed" | ## for cases where we don't know what has been omitted (e.g. if the page has been torn out and we cannot tell what was on it)
        "unknown" | ## used only when none of the above values are appropriate
        "other"
    },
    empty
  }

ws_add =
  ## (addition) contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. [3.5.3. Additions, Deletions, and Omissions]
  element add {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.transcriptional.attribute.cause,
    ws_att.transcriptional.attribute.seq,
    ws_att.editLike.attribute.evidence,
    ws_att.editLike.attribute.instant,
    ws_att.typed.attributes,
    [
      a:documentation [
        "points to a "
        ns1:code [ "<handNote>" ]
        " element describing the hand considered responsible for the content of the element concerned."
      ]
    ]
    attribute hand { xsd:anyURI },
    empty
  }

ws_del =
  ## (deletion) contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. [3.5.3. Additions, Deletions, and Omissions]
  element del {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.transcriptional.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.dimensions.attributes,
    empty
  }

ws_unclear =
  ## (unclear) contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. [11.3.3.1. Damage, Illegibility, and Supplied Text 3.5.3. Additions, Deletions, and Omissions]
  element unclear {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.editLike.attributes,
    ws_att.dimensions.attributes,
    attribute reason {
      ## the original page has been damaged through tearing, folding, creasing, foxing, fire or water damage, etc.
      "damaged" | ## for cases where the reproduction of the source document causes illegiblity but we have reason to believe the original is still legible (i.e. photocopies with insufficient contrast, smearing, edges cut off during filming, underexposure, etc.)
        "flawed-reproduction" | ## the original page is intact but the text is illegible due to poorly inked type, patches applied to the original page surface, partial deletion, etc.
        "obscured"
    }?,
    ## Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_name =
  ## (name, proper noun) contains a proper noun or noun phrase. [3.6.1. Referring Strings]
  element name {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.personal.attributes,
    ws_att.datable.attributes,
    ws_att.editLike.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      "properAdjective" | ## (filename or filepath) An operating system filepath or filename
        "file" | ## A TEI attribute or model class
        "class" | ## A TEI macro
        "macro"
      | [
          a:documentation [
            "A TEI constraint; i.e., the value of the "
            ns1:code [ "@ident" ]
            " attribute of a "
            ns1:code [ "<constraintSpec>" ]
            "\x{a}" ~
            "                  "
          ]
        ]
        "constraint"
    }?,
    empty
  }

ws_rs =
  ## (referencing string) contains a general purpose name or referring string. [13.2.1. Personal Names 3.6.1. Referring Strings]
  element rs {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.naming.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      "collectivity" | "person" | "place" | "properAdjective" | "source" | "title"
      | [
          a:documentation [
            "(unspecified feature used for organization) Used to encoding a string to refer the reader to another portion of the document, typically by quoting its "
            ns1:code [ "<head>" ]
            "; an internal cross reference."
          ]
        ]
        "ufo" | "verb"
    },
    empty
  }

ws_email =
  ## (electronic mail address) contains an email address identifying a location to which email messages can be delivered. [3.6.2. Addresses]
  element email { ws_macro.phraseSeq, ws_att.global.attributes, empty }

ws_address =
  ## (address) contains a postal address, for example of a publisher, an organization, or an individual. [3.6.2. Addresses 2.2.4. Publication, Distribution, Licensing, etc. 3.12.2.4. Imprint, Size of a Document, and Reprint Information]
  element address {
    (ws_model.global*, (ws_model.addrPart, ws_model.global*)+),
    ws_att.global.attributes,
    empty
  }

ws_addrLine =
  ## (address line) contains one line of a postal address. [3.6.2. Addresses 2.2.4. Publication, Distribution, Licensing, etc. 3.12.2.4. Imprint, Size of a Document, and Reprint Information]
  element addrLine {
    ws_macro.phraseSeq, ws_att.global.attributes, empty
  }

ws_num =
  ## (number) contains a number, written in any form. [3.6.3. Numbers and
  ## Measures]
  element num {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ## indicates the type of numeric value.
    ## Suggested values include: 1] cardinal; 2] ordinal; 3] fraction; 4] percentage
    attribute type {
      ## absolute number, e.g. 21, 21.5
      "cardinal" | ## ordinal number, e.g. 21st
        "ordinal" | ## fraction, e.g. one half or three-quarters
        "fraction" | ## a percentage
        "percentage"
      | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    ## supplies the value of the number in standard form.
    attribute value {
      xsd:double
      | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
      | xsd:decimal
    }?,
    empty
  }

ws_measure =
  ## (measure) contains a word or phrase referring to some quantity of an object or commodity, usually comprising a number, a unit, and a commodity name. [3.6.3. Numbers and
  ## Measures]
  element measure {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.measurement.attributes,
    ## specifies the type of measurement in any convenient typology.
    attribute type {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_date =
  ## (date) contains a date in any format. [3.6.4. Dates and Times 2.2.4. Publication, Distribution, Licensing, etc. 2.6. The Revision Description 3.12.2.4. Imprint, Size of a Document, and Reprint Information 15.2.3. The Setting Description 13.4. Dates]
  element date {
    ((text | ws_model.gLike | ws_model.phrase | ws_model.global)*)
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "tei:application                                   |tei:date[not(@prev|@calendar)]                                   |tei:time[not(@prev|@calendar)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@when or @when-custom or @when-iso or                                     @notBefore or @notBefore-custom or @notBefore-iso or                                     @notAfter or @notAfter-iso or @notAfter-custom or                                     @from or @from-custom or @from-iso or                                     @to or @to-custom or @to-iso"
             "At least one temporal normalization attribute should be specified on a ＜"
             sch:value-of [ select = "name(.)" ]
             "＞."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "wwp-store-date-date_in_docDate-constraint-rule-24"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:docDate/tei:date"
           "\x{a}" ~
           "               "
           sch:let [
             name = "dateLen"
             value = "string-length(normalize-space(.) )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "docDateLen"
             value = "string-length(normalize-space(..))"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "$docDateLen - $dateLen gt 2"
             role = "warn"
             "Having a date element nested inside a docDate is rarely required"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "$docDateLen - $dateLen le 2"
             role = "error"
             "The date element is not used inside docDate to represent the same date as the docDate — just use the attributes of docDate."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "wwp-store-date-cert_on_date-constraint-rule-25"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "date/@cert"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "parent::publicationStmt"
             "Here at the WWP we only indicate uncertain dates inside the ＜publicationStmt＞."
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "normalize-space(.) eq 'low'"
             'The value of @cert on ＜date＞ should be "low" (or there should be no @cert).'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    ws_att.datable.attributes,
    ws_att.editLike.attributes,
    ws_att.dimensions.attributes,
    ws_att.typed.attributes,
    empty
  }

ws_time =
  ## (time) contains a phrase defining a time of day in any format. [3.6.4. Dates and Times]
  element time {
    (text | ws_model.gLike | ws_model.phrase | ws_model.global)*,
    ws_att.global.attributes,
    ws_att.datable.attribute.calendar,
    ws_att.datable.attribute.period,
    ws_att.datable.w3c.attribute.notBefore,
    ws_att.datable.w3c.attribute.notAfter,
    ws_att.datable.w3c.attribute.from,
    ws_att.datable.w3c.attribute.to,
    ws_att.datable.iso.attribute.when-iso,
    ws_att.datable.iso.attribute.notBefore-iso,
    ws_att.datable.iso.attribute.notAfter-iso,
    ws_att.datable.iso.attribute.from-iso,
    ws_att.datable.iso.attribute.to-iso,
    ws_att.datable.custom.attribute.when-custom,
    ws_att.datable.custom.attribute.notBefore-custom,
    ws_att.datable.custom.attribute.notAfter-custom,
    ws_att.datable.custom.attribute.from-custom,
    ws_att.datable.custom.attribute.to-custom,
    ws_att.datable.custom.attribute.datingPoint,
    ws_att.datable.custom.attribute.datingMethod,
    ws_att.canonical.attributes,
    ws_att.editLike.attributes,
    ws_att.dimensions.attributes,
    ws_att.typed.attributes,
    empty
  }

ws_abbr =
  ## (abbreviation) contains an abbreviation of any sort. [3.6.5. Abbreviations and Their Expansions]
  element abbr {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ## (type) allows the encoder to classify the abbreviation according to some convenient typology.
    ## Sample values include: 1] suspension (suspension); 2] contraction (contraction); 3] brevigraph; 4] superscription (superscription); 5] acronym (acronym); 6] title (title); 7] organization (organization); 8] geographic (geographic)
    attribute type {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_expan =
  ## (expansion) contains the expansion of an abbreviation. [3.6.5. Abbreviations and Their Expansions]
  element expan {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.editLike.attributes,
    empty
  }

ws_ptr =
  ## (pointer) defines a pointer to another location. [3.7. Simple Links and Cross-References 16.1. Links]
  element ptr {
    empty
    >> sch:pattern [
         id = "wwp-store-ptr-ptrAtts-constraint-report-19"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "attributes @target and @cRef may be supplied on "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.declaring.attributes,
    ws_att.global.attributes,
    ws_att.internetMedia.attributes,
    ws_att.pointing.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      "correction" | "div" | "error" | "pageNum" | "pageRange"
    }?,
    empty
  }

ws_ref =
  ## (reference) defines a reference to another location, possibly modified by additional text or comment. [3.7. Simple Links and Cross-References 16.1. Links]
  element ref {
    ws_macro.paraContent
    >> sch:pattern [
         id = "wwp-store-ref-refAtts-constraint-report-20"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes @target' and @cRef' may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.declaring.attributes,
    ws_att.global.attributes,
    ws_att.internetMedia.attributes,
    ws_att.pointing.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      "correction" | "div" | "error" | "pageNum" | "pageRange" | "goTo"
    }?,
    empty
  }

ws_list =
  ## (list) contains any sequence of items organized as a list. [3.8. Lists]
  element list {
    ((ws_model.divTop | ws_model.global | ws_desc*)*,
     ((ws_item, ws_model.global*)+
      | (ws_headLabel?,
         ws_headItem?,
         (ws_label, ws_model.global*, ws_item, ws_model.global*)+)),
     (ws_model.divBottom, ws_model.global*)*)
    >> sch:pattern [
         id =
           "wwp-store-list-gloss-list-must-have-labels-constraint-rule-26"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:list[@type='gloss']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "tei:label"
             'The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.sortable.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      ## (table of contents)  
      "toc" | "errata" | "subscriber" | "gloss"
    }?,
    empty
  }

ws_item =
  ## (item) contains one component of a list. [3.8. Lists 2.6. The Revision Description]
  element item {
    ((ws_argument | ws_macro.specialPara)*)
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "wwp:list[ not( @type = ('toc', 'reference', 'index' ) ) ]"
           "\x{a}" ~
           "               "
           sch:report [
             test = "child::wwp:item/@target"
             "＜item＞ elements should only have target= attributes if the list is a table of contents, index, or other reference list"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.sortable.attributes,
    (
     ## indicates the portion of the content to which this entry in the table of contents, index, or other reference list refers.
     attribute target {
       list { xsd:anyURI+ }
     }?)
    >> sch:pattern [
         id =
           "wwp-store-item-target-items-point-internally-constraint-assert-18"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:item/@target"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "id( substring( normalize-space( . ), 2 ) )"
             'The @target attribute of an ＜item＞ in a "toc", "reference", or "index" list should point to an element in the same document.'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }

ws_label =
  ## (label) contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.8. Lists]
  element label {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.written.attributes,
    attribute type {
      [
        a:documentation [
          "if this were drama, would be a "
          ns1:code [ "<speaker>" ]
          "\x{a}" ~
          "                  "
        ]
      ]
      "speaker"
    }?,
    empty
  }

ws_head =
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. Headings and Trailers]
  element head {
    (text
     | ws_lg
     | ws_model.gLike
     | ws_model.phrase
     | ws_model.inter
     | ws_model.lLike
     | ws_model.global)*,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.written.attributes,
    attribute type {
      "sub"
    }?,
    empty
  }

ws_headLabel =
  ## (heading for list labels) contains the heading for the label or term column in a glossary list or similar structured list. [3.8. Lists]
  element headLabel {
    ws_macro.phraseSeq, ws_att.global.attributes, empty
  }

ws_headItem =
  ## (heading for list items) contains the heading for the item or gloss column in a glossary list or similar structured list. [3.8. Lists]
  element headItem {
    ws_macro.phraseSeq, ws_att.global.attributes, empty
  }

ws_note =
  ## (note) contains a note or annotation. [3.9.1. Notes and Simple Annotation 2.2.6. The Notes Statement 3.12.2.8. Notes and Statement of Language 9.3.5.4. Notes within Entries]
  element note {
    ws_macro.noteContent
    >> sch:pattern [
         id = "wwp-store-note-note-has-target-constraint-rule-28"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:text//wwp:note[not(@target)]"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::wwp:hyperDiv | ancestor::wwp:div[@type='endnotes']"
             "ERROR: "
             sch:value-of [
               select =
                 "if (@xml:id) then concat('the note with id=', @xml:id ) else concat('note #',count( preceding::wwp:note))"
             ]
             " does not have a @target, but should (because it is an endnote or is inside ＜hyperDiv＞)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "wwp-store-note-note-not-point-to-self-constraint-rule-29"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:note[@target|@targetEnd]"
           "\x{a}" ~
           "               "
           sch:let [ name = "ptr2me" value = "concat('#', @xml:id )" ]
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "//wwp:note[ tokenize( string-join( ( @target, @targetEnd ), ' '),' ') = $ptr2me ]"
             "ERROR: the note element with id="
             sch:value-of [ select = "@xml:id" ]
             " refers to itself"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-note-textual-note-in-notesStmt-constraint-rule-30"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:note[ @type eq 'textual']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "parent::wwp:notesStmt"
             "textual notes should be in the "
             tei:gi [ "notesStmt" ]
             " in the TEI header."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-note-non-modern-note-not-in-notesStmt-constraint-rule-31"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:note[ @type = ('editorial','authorial') ]"
           "\x{a}" ~
           "               "
           sch:report [
             test = "parent::wwp:notesStmt"
             "\x{a}" ~
             "                  "
             sch:value-of [ select = "@type" ]
             " notes should not be in the "
             tei:gi [ "notesStmt" ]
             " in the TEI header."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "wwp-store-note-target-points-back-constraint-rule-32"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "wwp:note[ ( not(@type)  or  @type eq 'authorial' )  and  @target ]"
           "\x{a}" ~
           "               "
           sch:let [ name = "myID" value = "@xml:id" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "targets"
             value = "tokenize( normalize-space( @target ), ' ')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "TARGETs"
             value =
               "for $t in $targets return substring-after( $t,'#')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "returnPointers_eq_me"
             value =
               "for $T in $TARGETs return substring-after( id( $T )/@corresp,'#') eq $myID"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "$returnPointers_eq_me = false()"
             "One or more of the values of "
             tei:att [ "target" ]
             " of the "
             tei:gi [ "note" ]
             " with ID "
             sch:value-of [ select = "$myID" ]
             " points to an element whose "
             tei:att [ "corresp" ]
             " does not point back"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count( $targets ) > 0"
             "Empty @target of ＜note＞"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-note-note_with_only_add_should_be_add_with_note-constraint-report-26"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:note"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "*/add                                 and                                 not( */text()[not( normalize-space(.) eq '' ) ] )"
             "\x{a}" ~
             "                  "
             tei:gi [ "note" ]
             " "
             sch:value-of [
               select =
                 "if (@xml:id)                 then concat('the note with id=', @xml:id ) else                 concat('note #',count( preceding::wwp:note))"
             ]
             "\x{a}" ~
             "                should probably be an "
             tei:gi [ "add" ]
             " with a\x{a}" ~
             "                "
             tei:gi [ "note" ]
             " inside instead, as it seems to have no\x{a}" ~
             "                content other than an "
             tei:gi [ "add" ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.pointing.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.written.attributes,
    ws_att.anchoring.attributes,
    [ a:defaultValue = "authorial" ]
    attribute type {
      ## The note was written by the author, whether contemporaneously with the rest of the text or not.
      "authorial" | ## The note was written by an editor or publisher.
        "editorial" | ## The note is intended for intra-WWP communication, particularly to flag an issue to be reslolved later; intent is to remove it after the issue is resolved (hopefully, but not always, prior to publication).
        "temp"
      | [
          a:documentation [
            "Indicates an editorial note (which may be in the "
            ns1:code [ "<notesStmt>" ]
            ") supplied by the encoder or textbase editor, intended for public consumption."
          ]
        ]
        "public" | ## A note generated by WWP, not intended for public consumption; often used for notes to our future selves to avoid confusion or repeated work.
        "internal"
    }?,
    empty
  }

ws_graphic =
  ## (graphic) indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. [3.10. Graphics and Other Non-textual Components 11.1. Digital Facsimiles]
  element graphic {
    ws_model.descLike*,
    ws_att.global.attributes,
    ws_att.media.attributes,
    ws_att.resourced.attributes,
    ws_att.declaring.attributes,
    empty
  }

ws_milestone =
  ## (milestone) marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. [3.11.3. Milestone
  ## Elements]
  element milestone {
    empty
    >> sch:pattern [
         id = "wwp-store-milestone-idealSignature-constraint-assert-21"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:milestone"
           "\x{a}" ~
           "               "
           sch:let [ name = "me" value = "normalize-space(@n)" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "     matches( $me,'((facing|preceding) )?(\p{L}|\p{M}|\p{N}|\p{P}|\p{S})*[0-9]+[\])]?[rv]')"
             "\x{a}" ~
             "                The idealized signature “"
             sch:value-of [ select = "." ]
             "” does not match the defintion thereof.\x{a}" ~
             "              "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.edition.attributes,
    ws_att.spanning.attributes,
    ws_att.breaking.attributes,
    attribute unit {
      ## An idealized leaf signature. Typically should be a sequence of characters that indicate the printed signature (or what would be the printed signature if there were one) or first part thereof followed by a number (if the printed signature did not end with a number) and either ‘r’ (recto) or ‘v’ (verso), all optionally preceded by the word “facing” or “preceding” and a space. See https://www.wwp.neu.edu/research/publications/documentation/internal/#!/entry/signatures_narrative.
      "sig"
    },
    empty
  }

ws_pb =
  ## (page beginning) marks the beginning of a new page in a paginated document. [3.11.3. Milestone
  ## Elements]
  element pb {
    empty,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.edition.attributes,
    ws_att.spanning.attributes,
    ws_att.breaking.attributes,
    empty
  }

ws_lb =
  ## (line beginning) marks the beginning of a new (typographic) line in some edition or version of a text. [3.11.3. Milestone
  ## Elements 7.2.5. Speech Contents]
  element lb {
    empty,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.edition.attributes,
    ws_att.spanning.attributes,
    ws_att.breaking.attributes,
    empty
  }

ws_cb =
  ## (column beginning) marks the beginning of a new column of a text on a multi-column page. [3.11.3. Milestone
  ## Elements]
  element cb {
    empty,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.edition.attributes,
    ws_att.spanning.attributes,
    ws_att.breaking.attributes,
    empty
  }

ws_analytic =
  ## (analytic level) contains bibliographic elements describing an item (e.g. an article or poem) published within a monograph or journal and not as an independent publication. [3.12.2.1. Analytic, Monographic, and Series Levels]
  element analytic {
    (ws_author
     | ws_editor
     | ws_respStmt
     | ws_title
     | ws_model.ptrLike
     | ws_date
     | ws_idno
     | ws_availability)*,
    ws_att.global.attributes,
    empty
  }

ws_monogr =
  ## (monographic level) contains bibliographic elements describing an item (e.g. a book or journal) published as an independent item (i.e. as a separate physical object). [3.12.2.1. Analytic, Monographic, and Series Levels]
  element monogr {
    ((((ws_author | ws_editor | ws_respStmt),
       (ws_author | ws_editor | ws_respStmt)*,
       ws_title+,
       (ws_model.ptrLike | ws_idno | ws_editor | ws_respStmt)*)
      | ((ws_title | ws_model.ptrLike | ws_idno)+,
         (ws_author | ws_editor | ws_respStmt)*)
      | ws_idno)?,
     ws_availability*,
     ws_model.noteLike*,
     (ws_edition,
      (ws_idno
       | ws_model.ptrLike
       | ws_editor
       | ws_sponsor
       | ws_funder
       | ws_respStmt)*)*,
     ws_imprint,
     (ws_imprint | ws_extent | ws_biblScope)*),
    ws_att.global.attributes,
    empty
  }

ws_series =
  ## (series information) contains information about the series in which a book or other bibliographic item has appeared. [3.12.2.1. Analytic, Monographic, and Series Levels]
  element series {
    (text
     | ws_model.gLike
     | ws_title
     | ws_model.ptrLike
     | ws_editor
     | ws_respStmt
     | ws_biblScope
     | ws_idno
     | ws_model.global
     | ws_availability)*,
    ws_att.global.attributes,
    empty
  }

ws_author =
  ## (author) in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement]
  element author {
    ws_macro.phraseSeq
    >> sch:pattern [
         id =
           "wwp-store-author-authors-have-refs-in-metadata-constraint-rule-33"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:teiHeader//wwp:author/wwp:persName"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@ref"
             "Authors should have a reference to the personography."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.naming.attributes,
    ws_att.datable.attributes,
    [ a:defaultValue = "main" ]
    attribute type {
      ## a primary author.
      "main" | ## an author whom the Women Writers Project for some reason wishes to consider as occupying a subsidiary role.
        "other"
    }?,
    empty
  }

ws_editor =
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. [3.12.2.2. Titles, Authors, and Editors]
  element editor {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.naming.attributes,
    ws_att.datable.attributes,
    empty
  }

ws_respStmt =
  ## (statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]
  element respStmt {
    ws_model.nameLike.agent,
    (ws_resp+ | (ws_model.nameLike.agent+, ws_resp)),
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    empty
  }

ws_resp =
  ## (responsibility) contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]
  element resp {
    ws_macro.phraseSeq.limited,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    ws_att.datable.attributes,
    attribute type {
      ## See corresponding @type value on docAuthor.
      "author" | ## a person or organization credited as an author, but given lower precedence than the main author(s)
        "author-secondary" | ## See corresponding @type value on docAuthor.
        "bookseller" | ## See corresponding @type value on docAuthor.
        "printer" | ## See corresponding @type value on docAuthor.
        "translator"
    }?,
    empty
  }

ws_title =
  ## (title) contains a title for any kind of work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.5. The Series Statement]
  element title {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.canonical.attributes,
    ws_att.datable.attributes,
    attribute type {
      ## indicates a subtitle
      "sub" | ## used for the primary or main title of the work
        "main"
    }?,
    ## indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.
    attribute level {
      ## (analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item.
      "a" | ## (monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works
        "m" | ## (journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper
        "j" | ## (series) the title applies to a series of otherwise distinct publications such as a collection
        "s" | ## (unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)
        "u"
    }?,
    empty
  }

ws_imprint =
  ## groups information relating to the publication or distribution of a bibliographic item. [3.12.2.4. Imprint, Size of a Document, and Reprint Information]
  element imprint {
    ((ws_catRef)*,
     ((ws_model.imprintPart | ws_model.dateLike),
      ws_respStmt*,
      ws_model.global*)+),
    ws_att.global.attributes,
    empty
  }

ws_publisher =
  ## (publisher) provides the name of the organization responsible for the publication or distribution of a bibliographic item. [3.12.2.4. Imprint, Size of a Document, and Reprint Information 2.2.4. Publication, Distribution, Licensing, etc.]
  element publisher {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    empty
  }

ws_biblScope =
  ## (scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.12.2.5. Scopes and Ranges in Bibliographic Citations]
  element biblScope {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.citing.attributes,
    empty
  }

ws_citedRange =
  ## (cited range) defines the range of cited content, often represented by pages or other units [3.12.2.5. Scopes and Ranges in Bibliographic Citations]
  element citedRange {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.pointing.attributes,
    ws_att.citing.attributes,
    empty
  }

ws_pubPlace =
  ## (publication place) contains the name of the place where a bibliographic item was published. [3.12.2.4. Imprint, Size of a Document, and Reprint Information]
  element pubPlace {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.naming.attributes,
    empty
  }

ws_bibl =
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element bibl {
    (text
     | ws_model.gLike
     | ws_model.highlighted
     | ws_model.pPart.data
     | ws_model.pPart.edit
     | ws_model.segLike
     | ws_model.ptrLike
     | ws_model.biblPart
     | ws_model.global
     | ws_epigraph)*,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    ws_att.typed.attributes,
    ws_att.sortable.attributes,
    ws_att.docStatus.attributes,
    empty
  }

ws_biblStruct =
  ## (structured bibliographic citation) contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element biblStruct {
    (ws_analytic*,
     (ws_monogr, ws_series*)+,
     (ws_model.noteLike | ws_model.ptrLike | ws_citedRange)*),
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    ws_att.typed.attributes,
    ws_att.sortable.attributes,
    ws_att.docStatus.attributes,
    empty
  }

ws_listBibl =
  ## (citation list) contains a list of bibliographic citations of any kind. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element listBibl {
    (ws_model.headLike*,
     ws_desc*,
     (ws_model.milestoneLike)*,
     (ws_model.biblLike+, (ws_model.milestoneLike)*)+),
    ws_att.global.attributes,
    ws_att.sortable.attributes,
    ws_att.declarable.attributes,
    ws_att.typed.attributes,
    empty
  }

ws_l =
  ## (verse line) contains a single, possibly incomplete, line of verse. [3.13.1. Core Tags for Verse 3.13. Passages of Verse or Drama 7.2.5. Speech Contents]
  element l {
    ((text
      | ws_model.gLike
      | ws_model.phrase
      | ws_model.inter
      | ws_model.global)*)
    >> sch:pattern [
         id = "wwp-store-l-no-nested-metrical-line-constraint-report-27"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:l"
           "\x{a}" ~
           "               "
           sch:report [
             test = "descendant::wwp:l"
             "A metrical line should not contain a metrical line"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-l-abstractModel-structure-l-in-l-constraint-report-28"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:l"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:l[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain lines or lg elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.fragmentable.attributes,
    empty
  }

ws_lg =
  ## (line group) contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. [3.13.1. Core Tags for Verse 3.13. Passages of Verse or Drama 7.2.5. Speech Contents]
  element lg {
    ((ws_model.divTop | ws_model.stageLike | ws_model.global)*,
     (ws_model.lLike | ws_lg),
     (ws_model.lLike
      | ws_lg
      | ws_model.stageLike
      | ws_model.labelLike
      | ws_model.global)*,
     (ws_model.divBottom,
      (ws_model.stageLike | ws_model.labelLike | ws_model.global)*)*)
    >> sch:pattern [
         id = "wwp-store-lg-atleast1oflggapl-constraint-assert-23"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) > 0"
             "An lg element\x{a}" ~
             "        must contain at least one child l, lg, or gap element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-lg-abstractModel-structure-lg-in-l-constraint-report-29"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:lg[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain line groups.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.divLike.attributes,
    ws_att.declaring.attributes,
    attribute type {
      "common" | "couplet" | "couplet-heroic" | "drama" | "indeterminate" | "octet" | "ottava-rima" | "para" | "poem" | "quatrain" | "quintet" | "refrain" | "rime-royal" | "section" | "septet" | "sestet" | "spenserian" | "stanza" | "tercet"
    },
    attribute subtype {
      "dramatic-verse" | "verse" | "indeterminate" | "stanzaic" | "sonnet-shakespearean" | "sonnet" | "sonnet-petrarchan" | "acrostic" | "ode-english" | "spatial"
    }?,
    empty
  }

ws_sp =
  ## (speech) contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. [3.13.2. Core Tags for Drama 3.13. Passages of Verse or Drama 7.2.2. Speeches and Speakers]
  element sp {
    (ws_model.global*,
     (ws_speaker, ws_model.global*)?,
     ((ws_lg
       | ws_model.lLike
       | ws_model.pLike
       | ws_model.listLike
       | ws_model.stageLike
       | ws_model.attributable),
      (ws_model.global* | ws_q))+),
    ws_att.global.attributes,
    ws_att.ascribed.directed.attribute.toWhom,
    ## indicates the person, or group of people, to whom the element content is ascribed.
    attribute who {
      list { xsd:anyURI+ }
    }
    >> sch:pattern [
         id = "wwp-store-sp-who-who-points-to-role-constraint-rule-34"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:sp[@who]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "whos"
             value = "tokenize( normalize-space( @who ), ' ')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "WHOs"
             value = "for $w in $whos return substring-after( $w,'#')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "points2something"
             value = "for $w in $WHOs return exists( id( $w ) )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "pointed2by_who"
             value = "for $w in $WHOs return id($w)"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "$points2something = false()"
             "One or more of the pointers in this @who does not point to a local element."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count( $pointed2by_who ) eq count( $pointed2by_who[self::wwp:role] )"
             "The @who of ＜sp＞ is supposed to point ＜role＞s, but this one points to: "
             sch:value-of [
               select =
                 "for $e in $pointed2by_who return concat('＜', $e/name(.), '＞ ')"
             ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }

ws_speaker =
  ## contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. [3.13.2. Core Tags for Drama]
  element speaker {
    ws_macro.phraseSeq
    >> sch:pattern [
         id =
           "wwp-store-speaker-no_details_in_speaker-constraint-report-31"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:speaker"
           "\x{a}" ~
           "               "
           sch:report [
             test = "wwp:persName"
             role = "warning"
             "We do not normally put "
             tei:gi [ "persName" ]
             " inside of a "
             tei:gi [ "speaker" ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "wwp:choice/wwp:abbr|wwp:abbr|wwp:expan"
             role = "warning"
             "We do not typically record or normalize abbreviations (or expansions) inside of a "
             tei:gi [ "speaker" ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    empty
  }

ws_stage =
  ## (stage direction) contains any kind of stage direction within a dramatic text or fragment. [3.13.2. Core Tags for Drama 3.13. Passages of Verse or Drama 7.2.4. Stage Directions]
  element stage {
    ws_macro.specialPara,
    ws_att.ascribed.directed.attributes,
    ws_att.global.attributes,
    ## indicates the type of stage direction.
    attribute type {
      list {
        (
         ## describes stage business—that is, some activity taking place while the lines are being spoken (for example, “While toying with her fan” or “Rocks fall from above”)
         "business" | ## describes the delivery of a line, either to whom or in what manner it is spoken (for example, “Sotto voce”, “Aside”, “To Acrasia”); this should be distinguished from stage business, which describes accompanying action rather than the speech itself
           "delivery" | ## describes an entrance to the stage (for instance, “Enter, a Clown”)
           "entrance" | ## describes an exit from the stage (for example, “Exits”, “Exeunt omnes”)
           "exit" | ## describes the location from which a line is delivered (such as “From the couch”, “At the door”, or “Seated at the table”); this should not be confused with setting, which describes aspects of the entire scene rather than the position of a character for a particular line
           "location" | ## describes a character's appearance or some detail of that character (for example, “Disguised as a juggler”, “Wearing a fright wig”, “Laden with tin pots”)
           "modifier" | ## describes the state of mind or motivations of a character, as if from an omniscient narrator's point of view (for example, “Fed up with the situation, and becoming impatient”, “Wondering what she means”, “Privately contemplating escape”)
           "novelistic" | ## used in cases where a stage direction gives the names of characters present on the stage without offering any further information on their appearance or actions (for example, “Alice and Amelia”)
           "present" | ## describes props that are onstage or indicates the presence of props (for example “the shield of Minerva”); this value should be used only when props are significant in the text
           "prop" | ## indcates characters who remain on the stage when others exit (for example “manet Norfolk”)
           "remains" | ## indicates a setting for the dramatic scene, possibly involving some details of stage layout, lighting, time, place, or occasion (for instance, “A ballroom lit with candles, soft music playing” or “Venice in the seventeenth century, the sky bright with the early light of a summer morning”)
           "setting"),
        (
         ## describes stage business—that is, some activity taking place while the lines are being spoken (for example, “While toying with her fan” or “Rocks fall from above”)
         "business" | ## describes the delivery of a line, either to whom or in what manner it is spoken (for example, “Sotto voce”, “Aside”, “To Acrasia”); this should be distinguished from stage business, which describes accompanying action rather than the speech itself
           "delivery" | ## describes an entrance to the stage (for instance, “Enter, a Clown”)
           "entrance" | ## describes an exit from the stage (for example, “Exits”, “Exeunt omnes”)
           "exit" | ## describes the location from which a line is delivered (such as “From the couch”, “At the door”, or “Seated at the table”); this should not be confused with setting, which describes aspects of the entire scene rather than the position of a character for a particular line
           "location" | ## describes a character's appearance or some detail of that character (for example, “Disguised as a juggler”, “Wearing a fright wig”, “Laden with tin pots”)
           "modifier" | ## describes the state of mind or motivations of a character, as if from an omniscient narrator's point of view (for example, “Fed up with the situation, and becoming impatient”, “Wondering what she means”, “Privately contemplating escape”)
           "novelistic" | ## used in cases where a stage direction gives the names of characters present on the stage without offering any further information on their appearance or actions (for example, “Alice and Amelia”)
           "present" | ## describes props that are onstage or indicates the presence of props (for example “the shield of Minerva”); this value should be used only when props are significant in the text
           "prop" | ## indcates characters who remain on the stage when others exit (for example “manet Norfolk”)
           "remains" | ## indicates a setting for the dramatic scene, possibly involving some details of stage layout, lighting, time, place, or occasion (for instance, “A ballroom lit with candles, soft music playing” or “Venice in the seventeenth century, the sky bright with the early light of a summer morning”)
           "setting")?,
        (
         ## describes stage business—that is, some activity taking place while the lines are being spoken (for example, “While toying with her fan” or “Rocks fall from above”)
         "business" | ## describes the delivery of a line, either to whom or in what manner it is spoken (for example, “Sotto voce”, “Aside”, “To Acrasia”); this should be distinguished from stage business, which describes accompanying action rather than the speech itself
           "delivery" | ## describes an entrance to the stage (for instance, “Enter, a Clown”)
           "entrance" | ## describes an exit from the stage (for example, “Exits”, “Exeunt omnes”)
           "exit" | ## describes the location from which a line is delivered (such as “From the couch”, “At the door”, or “Seated at the table”); this should not be confused with setting, which describes aspects of the entire scene rather than the position of a character for a particular line
           "location" | ## describes a character's appearance or some detail of that character (for example, “Disguised as a juggler”, “Wearing a fright wig”, “Laden with tin pots”)
           "modifier" | ## describes the state of mind or motivations of a character, as if from an omniscient narrator's point of view (for example, “Fed up with the situation, and becoming impatient”, “Wondering what she means”, “Privately contemplating escape”)
           "novelistic" | ## used in cases where a stage direction gives the names of characters present on the stage without offering any further information on their appearance or actions (for example, “Alice and Amelia”)
           "present" | ## describes props that are onstage or indicates the presence of props (for example “the shield of Minerva”); this value should be used only when props are significant in the text
           "prop" | ## indcates characters who remain on the stage when others exit (for example “manet Norfolk”)
           "remains" | ## indicates a setting for the dramatic scene, possibly involving some details of stage layout, lighting, time, place, or occasion (for instance, “A ballroom lit with candles, soft music playing” or “Venice in the seventeenth century, the sky bright with the early light of a summer morning”)
           "setting")?,
        (
         ## describes stage business—that is, some activity taking place while the lines are being spoken (for example, “While toying with her fan” or “Rocks fall from above”)
         "business" | ## describes the delivery of a line, either to whom or in what manner it is spoken (for example, “Sotto voce”, “Aside”, “To Acrasia”); this should be distinguished from stage business, which describes accompanying action rather than the speech itself
           "delivery" | ## describes an entrance to the stage (for instance, “Enter, a Clown”)
           "entrance" | ## describes an exit from the stage (for example, “Exits”, “Exeunt omnes”)
           "exit" | ## describes the location from which a line is delivered (such as “From the couch”, “At the door”, or “Seated at the table”); this should not be confused with setting, which describes aspects of the entire scene rather than the position of a character for a particular line
           "location" | ## describes a character's appearance or some detail of that character (for example, “Disguised as a juggler”, “Wearing a fright wig”, “Laden with tin pots”)
           "modifier" | ## describes the state of mind or motivations of a character, as if from an omniscient narrator's point of view (for example, “Fed up with the situation, and becoming impatient”, “Wondering what she means”, “Privately contemplating escape”)
           "novelistic" | ## used in cases where a stage direction gives the names of characters present on the stage without offering any further information on their appearance or actions (for example, “Alice and Amelia”)
           "present" | ## describes props that are onstage or indicates the presence of props (for example “the shield of Minerva”); this value should be used only when props are significant in the text
           "prop" | ## indcates characters who remain on the stage when others exit (for example “manet Norfolk”)
           "remains" | ## indicates a setting for the dramatic scene, possibly involving some details of stage layout, lighting, time, place, or occasion (for instance, “A ballroom lit with candles, soft music playing” or “Venice in the seventeenth century, the sky bright with the early light of a summer morning”)
           "setting")?,
        (
         ## describes stage business—that is, some activity taking place while the lines are being spoken (for example, “While toying with her fan” or “Rocks fall from above”)
         "business" | ## describes the delivery of a line, either to whom or in what manner it is spoken (for example, “Sotto voce”, “Aside”, “To Acrasia”); this should be distinguished from stage business, which describes accompanying action rather than the speech itself
           "delivery" | ## describes an entrance to the stage (for instance, “Enter, a Clown”)
           "entrance" | ## describes an exit from the stage (for example, “Exits”, “Exeunt omnes”)
           "exit" | ## describes the location from which a line is delivered (such as “From the couch”, “At the door”, or “Seated at the table”); this should not be confused with setting, which describes aspects of the entire scene rather than the position of a character for a particular line
           "location" | ## describes a character's appearance or some detail of that character (for example, “Disguised as a juggler”, “Wearing a fright wig”, “Laden with tin pots”)
           "modifier" | ## describes the state of mind or motivations of a character, as if from an omniscient narrator's point of view (for example, “Fed up with the situation, and becoming impatient”, “Wondering what she means”, “Privately contemplating escape”)
           "novelistic" | ## used in cases where a stage direction gives the names of characters present on the stage without offering any further information on their appearance or actions (for example, “Alice and Amelia”)
           "present" | ## describes props that are onstage or indicates the presence of props (for example “the shield of Minerva”); this value should be used only when props are significant in the text
           "prop" | ## indcates characters who remain on the stage when others exit (for example “manet Norfolk”)
           "remains" | ## indicates a setting for the dramatic scene, possibly involving some details of stage layout, lighting, time, place, or occasion (for instance, “A ballroom lit with candles, soft music playing” or “Venice in the seventeenth century, the sky bright with the early light of a summer morning”)
           "setting")?
      }
    },
    empty
  }
ws_teiCorpus =
  [
    a:documentation [
      "(TEI corpus) contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more "
      ns1:code [ "<TEI>" ]
      " elements, each containing a single text header and a text. [4. Default Text Structure 15.1. Varieties of Composite Text]"
    ]
  ]
  element teiCorpus {
    (ws_teiHeader, ws_model.resource*, ws_model.describedResource+),
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ## (version) specifies the version number of the TEI Guidelines against which this document is valid.
    attribute version {
      xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
    }?,
    empty
  }

ws_set =
  ## (setting) contains a description of the setting, time, locale, appearance, etc., of the action of a play, typically found in the front matter of a printed performance text (not a stage direction). [7.1. Front and Back Matter
  ##  ]
  element set {
    ((ws_model.headLike | ws_model.global)*,
     (ws_model.common, ws_model.global*)*),
    ws_att.global.attributes,
    empty
  }

ws_castList =
  ## (cast list) contains a single cast list or dramatis personae. [7.1.4. Cast Lists 7.1. Front and Back Matter
  ##  ]
  element castList {
    ((ws_model.divTop | ws_model.global)*,
     (ws_model.common, ws_model.global*)*,
     ((ws_castItem | ws_castGroup), ws_model.global*)+,
     (ws_model.common, ws_model.global*)*),
    ws_att.global.attributes,
    empty
  }
ws_castGroup =
  [
    a:documentation [
      "(cast list grouping) groups one or more individual "
      ns1:code [ "<castItem>" ]
      " elements within a cast list. [7.1.4. Cast Lists]"
    ]
  ]
  element castGroup {
    ((ws_model.global | ws_model.headLike)*,
     ((ws_castItem | ws_castGroup | ws_roleDesc), ws_model.global*)+,
     (ws_trailer, ws_model.global*)?),
    ws_att.global.attributes,
    attribute gender {
      "male" | "female" | "mixed" | "unknown" | "inapplicable"
    }?,
    empty
  }

ws_castItem =
  ## (cast list item) contains a single entry within a cast list, describing either a single role or a list of non-speaking roles. [7.1.4. Cast Lists]
  element castItem {
    (text
     | ws_model.gLike
     | ws_model.castItemPart
     | ws_model.phrase
     | ws_model.global)*,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ## characterizes the cast item.
    [ a:defaultValue = "role" ]
    attribute type {
      ## the item describes a single role.
      "role" | ## the item describes a list of non-speaking roles.
        "list"
    }?,
    attribute gender {
      "male" | "female" | "mixed" | "unknown" | "inapplicable"
    }?,
    empty
  }

ws_role =
  ## (role) contains the name of a dramatic role, as given in a cast list. [7.1.4. Cast Lists]
  element role {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    attribute gender {
      "male" | "female" | "mixed" | "unknown" | "inapplicable"
    }?,
    empty
  }

ws_roleDesc =
  ## (role description) describes a character's role in a drama. [7.1.4. Cast Lists]
  element roleDesc {
    ws_macro.phraseSeq, ws_att.global.attributes, empty
  }

ws_actor =
  ## contains the name of an actor appearing within a cast list. [7.1.4. Cast Lists]
  element actor {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    empty
  }

ws_spGrp =
  ## (speech group) contains a group of speeches or songs in a performance text presented in a source as constituting a single unit or number. [7.2.3. Grouped Speeches]
  element spGrp {
    (ws_model.headLike*,
     (ws_model.global | ws_sp | ws_model.stageLike)+),
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.ascribed.directed.attributes,
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    },
    empty
  }
ws_att.tableDecoration.attributes =
  ws_att.tableDecoration.attribute.role,
  ws_att.tableDecoration.attribute.rows,
  ws_att.tableDecoration.attribute.cols
ws_att.tableDecoration.attribute.role =
  ## (role) indicates the kind of information held in this cell or in each cell of this row.
  [ a:defaultValue = "data" ]
  attribute role {
    ## labelling or descriptive information only.
    "label" | ## data values.
      "data"
  }?
ws_att.tableDecoration.attribute.rows =
  ## (rows) indicates the number of rows occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute rows { xsd:nonNegativeInteger }?
ws_att.tableDecoration.attribute.cols =
  ## (columns) indicates the number of columns occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute cols { xsd:nonNegativeInteger }?

ws_table =
  ## (table) contains text displayed in tabular form, in rows and columns. [14.1.1. TEI Tables]
  element table {
    ((ws_model.headLike | ws_model.global)*,
     ((ws_row, ws_model.global*)+
      | (ws_model.graphicLike, ws_model.global*)+),
     (ws_model.divBottom, ws_model.global*)*),
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ## (rows) indicates the number of rows in the table.
    attribute rows { xsd:nonNegativeInteger }?,
    ## (columns) indicates the number of columns in each row of the table.
    attribute cols { xsd:nonNegativeInteger }?,
    empty
  }

ws_row =
  ## (row) contains one row of a table. [14.1.1. TEI Tables]
  element row {
    ws_cell+,
    ws_att.global.attributes,
    ws_att.tableDecoration.attributes,
    empty
  }

ws_cell =
  ## (cell) contains one cell of a table. [14.1.1. TEI Tables]
  element cell {
    ws_macro.specialPara,
    ws_att.global.attributes,
    ws_att.tableDecoration.attributes,
    empty
  }

ws_figure =
  ## (figure) groups elements representing or containing graphic information such as an illustration, formula, or figure. [14.4. Specific Elements for Graphic Images]
  element figure {
    ws_model.global*,
    (ws_head, ws_model.global*)*,
    ((ws_model.pLike | ws_lg), ws_model.global*)*,
    (ws_figDesc, ws_model.global*),
    (ws_floatingText, ws_model.global*)?,
    ((ws_model.pLike | ws_lg), ws_model.global*)*,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.written.attributes,
    empty
  }

ws_figDesc =
  ## (description of figure) contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. [14.4. Specific Elements for Graphic Images]
  element figDesc {
    ws_macro.limitedContent, ws_att.global.attributes, empty
  }

ws_g =
  ## (character or glyph) represents a glyph, or a non-standard character. [5. Characters, Glyphs, and Writing Modes]
  element g {
    empty,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ## points to a description of the character or glyph intended.
    attribute ref { xsd:anyURI }
    >> sch:pattern [
         id = "wwp-store-g-ref-g-points-to-char-constraint-rule-35"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "wwp:g[@ref][/wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "ref"
             value = "substring( normalize-space( @ref ), 2 )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "reffed"
             value =
               "if ( //wwp:charDecl )                                     then id( $ref )                                     else                                       document('../common-boilerplate.xml', /) // *[ @xml:id eq $ref ]"
           ]
           "\x{a}" ~
           "               "
           sch:let [ name = "test" value = "$reffed[ self::wwp:char ]" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$test"
             "The @ref of ＜g＞ should point to a ＜char＞; this one ("
             sch:value-of [ select = "." ]
             ") points to "
             sch:value-of [
               select =
                 "if ($reffed)                             then concat('a ＜', name($reffed),'＞')                             else 'nothing'"
             ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }

ws_charDecl =
  ## (character declarations) provides information about nonstandard characters and glyphs. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element charDecl {
    (ws_desc?, (ws_char)+),
    ws_att.global.attributes,
    empty
  }

ws_char =
  ## (character) provides descriptive information about a character. [5.2. Markup Constructs for Representation of Characters and Glyphs]
  element char {
    (ws_mapping
     | ws_figure
     | ws_model.graphicLike
     | ws_model.noteLike
     | ws_model.descLike)*,
    ws_att.global.attributes,
    empty
  }
ws_mapping =
  [
    a:documentation [
      "(character mapping) contains one or more characters which are related to the parent character or glyph in some respect, as specified by the "
      ns1:code [ "@type" ]
      " attribute. [5.2. Markup Constructs for Representation of Characters and Glyphs]"
    ]
  ]
  element mapping {
    ws_macro.xtext,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ## The Unicode Standard Notation of the character(s) to which the character or glyph being described should be mapped.
    attribute value {
      list {
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" },
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }?,
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }?,
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }?,
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }?,
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }?,
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }?,
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }?
      }
    }?,
    empty
  }
ws_att.patternReplacement.attributes =
  ws_att.patternReplacement.attribute.matchPattern,
  ws_att.patternReplacement.attribute.replacementPattern
ws_att.patternReplacement.attribute.matchPattern =
  ## specifies a regular expression against which the values of other attributes can be matched.
  attribute matchPattern { xsd:token }
ws_att.patternReplacement.attribute.replacementPattern =
  [
    a:documentation [
      "specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the "
      ns1:code [ "@matchPattern" ]
      " which, once subpattern substitution has been performed, complete the URI."
    ]
  ]
  attribute replacementPattern { text }

ws_teiHeader =
  ## (TEI header) supplies descriptive and declarative metadata associated with a digital resource or set of resources. [2.1.1. The TEI Header and Its Components 15.1. Varieties of Composite Text]
  element teiHeader {
    (ws_fileDesc, ws_model.teiHeaderPart*, ws_revisionDesc?)
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:teiHeader"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "wwp:profileDesc/wwp:textClass"
             "The WWP requires at least one ＜textClass＞ element be present."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "wwp:fileDesc/wwp:editionStmt                                     or                                     wwp:fileDesc/xi:include[                                       contains( @xpointer, 'WWPedition')                                     ]"
             "The WWP requires at least one ＜editionStmt＞ element be present or included."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "wwp:encodingDesc/wwp:projectDesc                                     or                                     wwp:encodingDesc/xi:include[                                       contains( @xpointer, 'WWPprojectDescription')                                     ]"
             "The WWP requires at least one ＜projectDesc＞ element be present or included."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "wwp:encodingDesc/wwp:samplingDecl                                     or                                     wwp:encodingDesc/xi:include[                                       contains( @xpointer, 'WWPsamplingDeclaration')                                     ]"
             "The WWP requires at least one ＜samplingDecl＞ element be present or included."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "wwp:encodingDesc/wwp:editorialDecl                                     or                                     wwp:encodingDesc/xi:include[                                       contains( @xpointer, 'WWPeditorialDeclaration')                                     ]"
             "The WWP requires at least one ＜editorialDecl＞ element be present or included."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "wwp:encodingDesc/wwp:charDecl                                     or                                     wwp:encodingDesc/xi:include[                                       contains( @xpointer, 'WWPcharacterDeclaration')                                     ]"
             "The WWP requires at least one ＜charDecl＞ element be present or included."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "wwp:encodingDesc/wwp:classDecl                                     or                                     wwp:encodingDesc/xi:include[                                       contains( @xpointer, 'WWPclassificationDeclaration')                                     ]"
             "The WWP requires at least one ＜classDecl＞ element be present or included."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "wwp:encodingDesc/wwp:listPrefixDef                                     or                                     wwp:encodingDesc/xi:include[                                       contains( @xpointer, 'WWPlistPrefixDefinitions')                                     ]"
             "The WWP requires at least one ＜listPrefixDef＞ element be present or included."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "wwp:encodingDesc/wwp:listPrefixDef"
             "WARNING: ＜listPrefixDef＞ not found, so values of @ref will not be tested — if you are using the supraSchemas project, just ignore this warning; otherwise, to validate @refs, perform XInclude processing before validation (to do so in oXygen check “Enable XInclude Processing” in the XML / XML Parser / XInclude Options preferences pane)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    empty
  }

ws_fileDesc =
  ## (file description) contains a full bibliographic description of an electronic file. [2.2. The File Description 2.1.1. The TEI Header and Its Components]
  element fileDesc {
    ((ws_titleStmt,
      (ws_editionStmt | ws_include),
      ws_extent?,
      ws_publicationStmt,
      ws_notesStmt?),
     ws_sourceDesc+),
    ws_att.global.attributes,
    empty
  }

ws_titleStmt =
  ## (title statement) groups information about the title of a work and those responsible for its content. [2.2.1. The Title Statement 2.2. The File Description]
  element titleStmt {
    (ws_title+, ws_model.respLike*), ws_att.global.attributes, empty
  }

ws_sponsor =
  ## (sponsor) specifies the name of a sponsoring organization or institution. [2.2.1. The Title Statement]
  element sponsor {
    ws_macro.phraseSeq.limited,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    ws_att.datable.attributes,
    empty
  }

ws_funder =
  ## (funding body) specifies the name of an individual, institution, or organization responsible for the funding of a project or text. [2.2.1. The Title Statement]
  element funder {
    ws_macro.phraseSeq.limited,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    ws_att.datable.attributes,
    empty
  }

ws_editionStmt =
  ## (edition statement) groups information relating to one edition of a text. [2.2.2. The Edition Statement 2.2. The File Description]
  element editionStmt {
    (ws_model.pLike+ | (ws_edition, ws_model.respLike*)),
    ws_att.global.attributes,
    empty
  }

ws_edition =
  ## (edition) describes the particularities of one edition of a text. [2.2.2. The Edition Statement]
  element edition {
    ws_macro.phraseSeq, ws_att.global.attributes, empty
  }

ws_extent =
  ## (extent) describes the approximate size of a text stored on some carrier medium or of some other object, digital or non-digital, specified in any convenient units. [2.2.3. Type and Extent of File 2.2. The File Description 3.12.2.4. Imprint, Size of a Document, and Reprint Information 10.7.1. Object Description]
  element extent {
    (ws_measure | ws_dimensions), ws_att.global.attributes, empty
  }

ws_publicationStmt =
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other text. [2.2.4. Publication, Distribution, Licensing, etc. 2.2. The File Description]
  element publicationStmt {
    ((ws_model.publicationStmtPart.agency,
      ws_model.publicationStmtPart.detail*)+
     | ws_model.pLike+),
    ws_att.global.attributes,
    empty
  }

ws_idno =
  ## (identifier) supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. [2.2.4. Publication, Distribution, Licensing, etc. 2.2.5. The Series Statement 3.12.2.4. Imprint, Size of a Document, and Reprint Information]
  element idno {
    (text | ws_model.gLike | ws_idno)*,
    ws_att.global.attributes,
    ws_att.sortable.attributes,
    ws_att.datable.attributes,
    ws_att.typed.attribute.subtype,
    ## categorizes the number, for example as an ISBN or other standard series.
    attribute type {
      ## (University of California, Los Angeles) 
      "clu" | ## (William Andrews Clark Memorial Library) 
        "cluc" | ## (Henry E. Huntington Library) 
        "csmh" | ## (Yale University, Sterling Memorial Library) 
        "cty" | ## (Yale University, Beinecke Library) 
        "ctybr" | ## (Folger Shakespeare Library) 
        "dfo" | ## (US Library of Congress) 
        "dlc" | ## (John Crerar Library) 
        "icj" | ## (Jesuit Krauss McCormick Library) 
        "icjkm" | ## (Newberry Library ) 
        "icn" | ## (Center for Research Libraries) 
        "icrl" | ## (University of Chicago) 
        "icu" | ## (Northwestern University) 
        "ien" | ## (Earlham College Library) 
        "inre" | ## (Indiana University) 
        "inu" | ## (University of Illinois, Urbana) 
        "iu" | ## (Boston Public Library) 
        "mb" | ## (Boston Athenæum) 
        "mbat" | ## (Harvard University Medical School, Countway Library) 
        "mbco" | ## (Harvard University) 
        "mh" | ## (Harvard University, Houghton Library) 
        "mhh" | ## (University of Michigan) 
        "miu" | ## (Smith College) 
        "mns" | ## (American Antiquarian Society) 
        "mwa" | ## (State University of New York, College at Brockport) 
        "nbrocku" | ## (Dartmouth College) 
        "nhd" | ## (Princeton University) 
        "njp" | ## (New York Public Library) 
        "nn" | ## (Columbia University) 
        "nnc" | ## (Union Theological Seminary) 
        "nnut" | ## (Vassar College Library) 
        "npv" | ## (Free Library of Philadelphia) 
        "pp" | ## (University of Pennsylvania) 
        "pu" | ## (Brown University) 
        "rpb" | ## (John Carter Brown Library) 
        "rpjcb" | ## (British Library [duplicate]) 
        "uk" | ## (British Library) 
        "uk" | ## (Cambridge University) 
        "ukcu" | ## (University  of London, Goldsmith’s  Library) 
        "uklougc" | ## (Public Record Office, London) 
        "uklpr" | ## (John Rylands Library, University of Manchester) 
        "ukmajru" | ## (Bodleian Library) 
        "ukoxu" | ## (Oxford University, Bodleian Library [duplicate]) 
        "ukoxu" | ## (University of Virginia) 
        "viu" | ## (University of Wisconsin Madison Archives) 
        "wimauma" | ## (National Library of Wales) 
        "wlabnl" | ## (unknown) 
        "unknown" | ## (The Corvey Library, Germany) 
        "wwp:corvey" | ## (C. J. Hindle collection, Bodleian) 
        "wwp:hindle" | ## (Trinity College, Dublin) 
        "wwp:iedt" | ## (Thomason Collection, British Library) 
        "wwp:ukblt" | ## (Worcester College, Oxford) 
        "wwp:ukoxw" | ## ( ) 
        "Evans" | ## (Short Title Catalogue) 
        "STC" | ## ( ) 
        "Wing" | ## (Google) Google Books
        "Ca-MvGOO" | ## (Hathitrust) 
        "MiAaHDL" | ## (Proquest) I.e., EEBO and ECCO.
        "MiAaPQ" | ## (Uniform Resource Locator) This element contains the URL that points to the WWO browsing version of this file. Typically `http://www.wwp.northeastern.edu/texts/` followed by the name of the file with `.html` instead of `.xml`.
        "URL" | ## (unknown) 
        "unknown"
      | [
          a:documentation [
            "(Women Writers Project) This element contains the WWP transcription number, as obtained from the OT database. Generally speaking should match the regular expression `TR[0-9]{5}`. The same string is used as the value of "
            ns1:code [ "@xml:id" ]
            " of the main "
            ns1:code [ "<text>" ]
            "."
          ]
        ]
        "WWP"
    }?,
    empty
  }

ws_availability =
  ## (availability) supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. [2.2.4. Publication, Distribution, Licensing, etc.]
  element availability {
    (ws_model.availabilityPart | ws_model.pLike)+,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    ## (status) supplies a code identifying the current availability of the text.
    attribute status {
      ## (free) the text is freely available.
      "free" | ## (unknown) the status of the text is unknown.
        "unknown" | ## (restricted) the text is not freely available.
        "restricted"
    }?,
    empty
  }

ws_licence =
  ## contains information about a licence or other legal agreement applicable to the text. [2.2.4. Publication, Distribution, Licensing, etc.]
  element licence {
    ws_macro.specialPara,
    ws_att.global.attributes,
    ws_att.pointing.attributes,
    ws_att.datable.attributes,
    empty
  }

ws_notesStmt =
  ## (notes statement) collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. [2.2.6. The Notes Statement 2.2. The File Description]
  element notesStmt {
    (ws_model.noteLike)+, ws_att.global.attributes, empty
  }

ws_sourceDesc =
  ## (source description) describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. The Source Description]
  element sourceDesc {
    (ws_model.pLike+
     | (ws_model.biblLike
        | ws_model.sourceDescPart
        | ws_model.listLike)+),
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    empty
  }

ws_encodingDesc =
  ## (encoding description) documents the relationship between an electronic text and the source or sources from which it was derived. [2.3. The Encoding Description 2.1.1. The TEI Header and Its Components]
  element encodingDesc {
    (ws_model.encodingDescPart | ws_model.pLike)+,
    ws_att.global.attributes,
    empty
  }

ws_projectDesc =
  ## (project description) describes in detail the aim or purpose for which an electronic file was encoded, together with any other relevant information concerning the process by which it was assembled or collected. [2.3.1. The Project Description 2.3. The Encoding Description 15.3.2. Declarable Elements]
  element projectDesc {
    ws_model.pLike+,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    empty
  }

ws_samplingDecl =
  ## (sampling declaration) contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection. [2.3.2. The Sampling Declaration 2.3. The Encoding Description 15.3.2. Declarable Elements]
  element samplingDecl {
    ws_model.pLike+,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    empty
  }

ws_editorialDecl =
  ## (editorial practice declaration) provides details of editorial principles and practices applied during the encoding of a text. [2.3.3. The Editorial Practices Declaration 2.3. The Encoding Description 15.3.2. Declarable Elements]
  element editorialDecl {
    ((ws_model.editorialDeclPart+, ws_model.pLike*) | ws_model.pLike+),
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    empty
  }

ws_correction =
  ## (correction principles) states how and under what circumstances corrections have been made in the text. [2.3.3. The Editorial Practices Declaration 15.3.2. Declarable Elements]
  element correction {
    ws_model.pLike+,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    ## indicates the degree of correction applied to the text.
    attribute status {
      ## the text has been thoroughly checked and proofread.
      "high" | ## the text has been checked at least once.
        "medium" | ## the text has not been checked.
        "low" | ## the correction status of the text is unknown.
        "unknown"
    }?,
    ## indicates the method adopted to indicate corrections within the text.
    [ a:defaultValue = "silent" ]
    attribute method {
      ## corrections have been made silently
      "silent" | ## corrections have been represented using markup
        "markup"
    }?,
    empty
  }

ws_normalization =
  ## (normalization) indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form. [2.3.3. The Editorial Practices Declaration 15.3.2. Declarable Elements]
  element normalization {
    ws_model.pLike+,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    ## indicates the method adopted to indicate normalizations within the text.
    [ a:defaultValue = "silent" ]
    attribute method {
      ## normalization made silently
      "silent" | ## normalization represented using markup
        "markup"
    }?,
    empty
  }

ws_quotation =
  ## (quotation) specifies editorial practice adopted with respect to quotation marks in the original. [2.3.3. The Editorial Practices Declaration 15.3.2. Declarable Elements]
  element quotation {
    (ws_model.pLike*)
    >> sch:pattern [
         id =
           "wwp-store-quotation-quotationContents-constraint-report-33"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:quotation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@marks) and not (tei:p)"
             "\x{a}" ~
             "On "
             sch:name [ ]
             ", either the @marks attribute should be used, or a paragraph of description provided"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    ## (quotation marks) indicates whether or not quotation marks have been retained as content within the text.
    attribute marks {
      ## no quotation marks have been retained
      "none" | ## some quotation marks have been retained
        "some" | ## all quotation marks have been retained
        "all"
    }?,
    empty
  }

ws_hyphenation =
  ## (hyphenation) summarizes the way in which hyphenation in a source text has been treated in an encoded version of it. [2.3.3. The Editorial Practices Declaration 15.3.2. Declarable Elements]
  element hyphenation {
    ws_model.pLike+,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    ## (end-of-line) indicates whether or not end-of-line hyphenation has been retained in a text.
    [ a:defaultValue = "some" ]
    attribute eol {
      ## all end-of-line hyphenation has been retained, even though the lineation of the original may not have been.
      "all" | ## end-of-line hyphenation has been retained in some cases.
        "some" | ## all soft end-of-line hyphenation has been removed: any remaining end-of-line hyphenation should be retained.
        "hard" | ## all end-of-line hyphenation has been removed: any remaining hyphenation occurred within the line.
        "none"
    }?,
    empty
  }

ws_tagsDecl =
  ## (tagging declaration) provides detailed information about the tagging applied to a document. [2.3.4. The Tagging Declaration 2.3. The Encoding Description]
  element tagsDecl {
    ws_rendition*,
    ws_att.global.attributes,
    [
      a:documentation [
        "indicates whether the element types listed exhaustively include all those found within "
        ns1:code [ "<text>" ]
        ", or represent only a subset."
      ]
    ]
    attribute partial { xsd:boolean }?,
    empty
  }

ws_rendition =
  ## (rendition) supplies information about the rendition or appearance of one or more elements in the source text. [2.3.4. The Tagging Declaration]
  element rendition {
    ws_macro.xtext
    >> sch:pattern [
         id =
           "wwp-store-rendition-selector-required-if-pointed-at-constraint-assert-35"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:rendition"
           "\x{a}" ~
           "               "
           sch:let [
             name = "myIDref"
             value = "concat('#', normalize-space( @xml:id ) )"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@selector or ( @xml:id and                 /wwp:TEI/wwp:text//@rendition[ $myIDref = tokenize( normalize-space( . ),' ') ]                 )"
             "default "
             tei:gi [ "rendition" ]
             " #"
             sch:value-of [
               select =
                 "(@xml:id, count( preceding::wwp:rendition )+1 )[1]"
             ]
             " is not the default for anything (no "
             tei:att [ "selector" ]
             " and not pointed to by "
             tei:att [ "rendition" ]
             ")"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.styleDef.attribute.schemeVersion,
    ## identifies the language used to describe the rendition.
    [ a:defaultValue = "wwp" ]
    attribute scheme {
      "css" | "xslfo" | "free" | "other"
      | [
          a:documentation [
            "(Women Writers Project rendition ladder) indicates that the content of the element uses the WWP rendition ladders notation; indicates that the "
            ns1:code [ "@selector" ]
            " attribute uses CSS plus three special pseudo-classes, particularly for use with "
            ns1:code [ "<mw>" ]
            "\x{a}" ~
            "                  "
          ]
        ]
        "wwp"
    }?,
    [
      a:documentation [
        "contains a selector or series of selectors specifying the elements to which the contained style description applies, expressed in the language specified in the "
        ns1:code [ "@scheme" ]
        " attribute."
      ]
    ]
    attribute selector {
      xsd:string {
        pattern =
          """\s*(((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*))?((\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty)|:not\((((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)|\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty))\)))*(\s*[>+~ 	\x{a}""" ~
          """\x{d}]\s*(((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*))?((\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty)|:not\((((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)|\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty))\)))*)*(::?(first-(line|letter)|before|after))?(,\s*(((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*))?((\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty)|:not\((((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)|\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty))\)))*(\s*[>+~ 	\x{a}""" ~
          """\x{d}]\s*(((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*))?((\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty)|:not\((((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?(\*|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)|\[\s*((-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|\*)?\|)?-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*\s*([$~*|^]?=\s*('([^']|\\')*'|"([^"]|\\")*"|-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*)\s*)?\]|\.-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|#-?([a-zA-Z_ -􏿿]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))([a-zA-Z_ -􏿿0-9\-]|\\([!-􏿿-[a-fA-F0-9\n\r\t]]|[0-9a-fA-F]{1,6}\s?))*|:(link|visited|hover|active|focus|target|lang\((((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8}).))*(-(x(-[A-Za-z0-9]{1,8}).))?)|(x(-[A-Za-z0-9]{1,8}).))\)|enabled|disabled|checked|root|nth(-last)?-child\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|nth(-last)?-of-type\(\s*([+\-]?\s*[0-9]*n(\s*[+\-]?\s*[0-9]+)?|[+\-]?\s*[0-9]+|odd|even)\s*\)|(first|last|only)-(child|of-type)|empty))\)))*)*(::?(first-(line|letter)|before|after))?)*\s*"""
      }
    }?,
    empty
  }

ws_prefixDef =
  ## (prefix definition) defines a prefixing scheme used in teidata.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. [16.2.3. Using Abbreviated Pointers]
  element prefixDef {
    ws_model.pLike*,
    ws_att.global.attributes,
    ws_att.patternReplacement.attributes,
    ## supplies a name which functions as the prefix for an abbreviated pointing scheme such as a private URI scheme. The prefix constitutes the text preceding the first colon.
    attribute ident {
      xsd:token { pattern = "[a-z][a-z0-9\+\.\-]*" }
    },
    empty
  }

ws_listPrefixDef =
  ## (list of prefix definitions) contains a list of definitions of prefixing schemes used in teidata.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. [16.2.3. Using Abbreviated Pointers]
  element listPrefixDef {
    (ws_desc*, (ws_prefixDef | ws_listPrefixDef)+),
    ws_att.global.attributes,
    empty
  }
ws_classDecl =
  [
    a:documentation [
      "(classification declarations) contains a taxonomy (in a "
      ns1:code [ "<taxonomy>" ]
      ") defining any classificatory codes used elsewhere in the text. [2.3.7. The Classification Declaration 2.3. The Encoding Description]"
    ]
  ]
  element classDecl { ws_taxonomy, ws_att.global.attributes, empty }

ws_taxonomy =
  ## (taxonomy) explicitly defines a typology used to classify texts using a structured taxonomy. [2.3.7. The Classification Declaration]
  element taxonomy { ws_category+, ws_att.global.attributes, empty }

ws_category =
  ## (category) contains an individual descriptive category, possibly nested within a superordinate category, within a user-defined taxonomy. [2.3.7. The Classification Declaration]
  element category {
    ((ws_catDesc+ | (ws_model.descLike | ws_gloss)*),
     ws_category*),
    ws_att.global.attributes,
    empty
  }
ws_catDesc =
  [
    a:documentation [
      "(category description) describes some category within a taxonomy or text typology, either in the form of a brief prose description or in terms of the situational parameters used by the TEI formal "
      ns1:code [ "<textDesc>" ]
      ". [2.3.7. The Classification Declaration]"
    ]
  ]
  element catDesc {
    (text | ws_model.limitedPhrase | ws_model.catDescPart)*,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    empty
  }

ws_profileDesc =
  ## (text-profile description) provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. [2.4. The Profile Description 2.1.1. The TEI Header and Its Components]
  element profileDesc {
    ws_model.profileDescPart*, ws_att.global.attributes, empty
  }

ws_handNote =
  ## (note on hand) describes a particular style or hand distinguished within a manuscript. [10.7.2. Writing, Decoration, and Other Notations]
  element handNote {
    ws_macro.specialPara,
    ws_att.global.attributes,
    ws_att.handFeatures.attributes,
    empty
  }

ws_langUsage =
  ## (language usage) describes the languages, sublanguages, registers, dialects, etc. represented within a text. [2.4.2. Language Usage 2.4. The Profile Description 15.3.2. Declarable Elements]
  element langUsage {
    (ws_model.pLike+ | ws_language+),
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    empty
  }

ws_language =
  ## (language) characterizes a single language or sublanguage used within a text. [2.4.2. Language Usage]
  element language {
    ws_macro.phraseSeq.limited,
    ws_att.global.attributes,
    [
      a:documentation [
        "(identifier) Supplies a language code constructed as defined in "
        ns1:a [ href = "https://tools.ietf.org/html/bcp47" "BCP 47" ]
        " which is used to identify the language documented by this element, and which is referenced by the global "
        ns1:code [ "@xml:lang" ]
        " attribute."
      ]
    ]
    attribute ident {
      xsd:language
      | (
         "")
    },
    ## specifies the approximate percentage (by volume) of the text which uses this language.
    attribute usage { xsd:nonNegativeInteger }?,
    empty
  }

ws_textClass =
  ## (text classification)  [2.4.3. The Text Classification]
  element textClass {
    ws_catRef+,
    ws_att.global.attributes,
    ws_att.declarable.attributes,
    empty
  }

ws_catRef =
  ## (category reference) specifies one or more defined categories within some taxonomy or text typology. [2.4.3. The Text Classification]
  element catRef {
    empty,
    ws_att.global.attributes,
    ws_att.pointing.attributes,
    [ a:defaultValue = "main" ]
    attribute type {
      [
        a:documentation [
          "the primary classification of a text's genre. There should only be one "
          ns1:code [ "<catRef>" ]
          " with this type per textfile."
        ]
      ]
      "main" | ## a classification of a text's genre, but not the single most important classification.
        "other"
    }?,
    [
      a:documentation [
        "identifies the classification scheme within which the set of categories concerned is defined, for example by a "
        ns1:code [ "<taxonomy>" ]
        " element, or by some other resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    empty
  }

ws_calendarDesc =
  ## (calendar description) contains a description of the calendar system used in any dating expression found in the text. [2.4. The Profile Description 2.4.5. Calendar Description]
  element calendarDesc { ws_calendar+, ws_att.global.attributes, empty }

ws_calendar =
  ## (calendar) describes a calendar or dating system used in a dating formula in the text. [2.4.5. Calendar Description]
  element calendar {
    ws_model.pLike+,
    ws_att.global.attributes,
    ws_att.pointing.attributes,
    empty
  }

ws_revisionDesc =
  ## (revision description) summarizes the revision history for a file. [2.6. The Revision Description 2.1.1. The TEI Header and Its Components]
  element revisionDesc {
    (ws_list | ws_change+),
    ws_att.global.attributes,
    ws_att.docStatus.attributes,
    empty
  }

ws_change =
  ## (change) documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. [2.6. The Revision Description 2.4.1. Creation 11.7. Identifying Changes and Revisions]
  element change {
    ws_macro.specialPara,
    ws_att.datable.attribute.calendar,
    ws_att.datable.attribute.period,
    ws_att.datable.w3c.attribute.notBefore,
    ws_att.datable.w3c.attribute.notAfter,
    ws_att.datable.w3c.attribute.from,
    ws_att.datable.w3c.attribute.to,
    ws_att.datable.iso.attribute.when-iso,
    ws_att.datable.iso.attribute.notBefore-iso,
    ws_att.datable.iso.attribute.notAfter-iso,
    ws_att.datable.iso.attribute.from-iso,
    ws_att.datable.iso.attribute.to-iso,
    ws_att.datable.custom.attribute.when-custom,
    ws_att.datable.custom.attribute.notBefore-custom,
    ws_att.datable.custom.attribute.notAfter-custom,
    ws_att.datable.custom.attribute.from-custom,
    ws_att.datable.custom.attribute.to-custom,
    ws_att.datable.custom.attribute.datingPoint,
    ws_att.datable.custom.attribute.datingMethod,
    ws_att.docStatus.attributes,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ## indicates the person, or group of people, to whom the element content is ascribed.
    attribute who {
      list {
        xsd:anyURI { pattern = "p:[a-z]{2,9}\.[a-z]{3}" },
        xsd:anyURI { pattern = "p:[a-z]{2,9}\.[a-z]{3}" }?,
        xsd:anyURI { pattern = "p:[a-z]{2,9}\.[a-z]{3}" }?,
        xsd:anyURI { pattern = "p:[a-z]{2,9}\.[a-z]{3}" }?,
        xsd:anyURI { pattern = "p:[a-z]{2,9}\.[a-z]{3}" }?,
        xsd:anyURI { pattern = "p:[a-z]{2,9}\.[a-z]{3}" }?
      }
    },
    ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
    attribute when {
      xsd:date
      | xsd:gYear
      | xsd:gMonth
      | xsd:gDay
      | xsd:gYearMonth
      | xsd:gMonthDay
      | xsd:time
      | xsd:dateTime
    },
    ## (target) points to one or more elements that belong to this change.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
ws_att.global.linking.attributes =
  ws_att.global.linking.attribute.corresp,
  ws_att.global.linking.attribute.sameAs,
  ws_att.global.linking.attribute.next,
  ws_att.global.linking.attribute.prev
ws_att.global.linking.attribute.corresp =
  ## (corresponds) points to elements that correspond to the current element in some way.
  attribute corresp {
    list { xsd:anyURI+ }
  }?
ws_att.global.linking.attribute.sameAs =
  ## points to an element that is the same as the current element.
  attribute sameAs { xsd:anyURI }?
ws_att.global.linking.attribute.next =
  ## points to the next element of a virtual aggregate of which the current element is part.
  attribute next { xsd:anyURI }?
ws_att.global.linking.attribute.prev =
  ## (previous) points to the previous element of a virtual aggregate of which the current element is part.
  attribute prev { xsd:anyURI }?
sch:pattern [
  id =
    "wwp-store-att.global.linking-both-next-and-prev-constraint-rule-37"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "*[@xml:id]"
    "\x{a}" ~
    "         "
    sch:let [
      name = "isAprev"
      value = "//@prev/normalize-space(.) = concat('#',@xml:id)"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "isAnext"
      value = "//@next/normalize-space(.) = concat('#',@xml:id)"
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "@next and not( $isAprev )"
      sqf:fix = "notpreved"
      "Element "
      sch:value-of [ select = "@xml:id" ]
      " has a next= but is not pointed at by a prev="
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "@prev and not( $isAnext )"
      sqf:fix = "notnexted"
      "Element "
      sch:value-of [ select = "@xml:id" ]
      " has a prev= but is not pointed at by a next="
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "not( @next ) and $isAprev"
      sqf:fix = "nextless"
      "Element "
      sch:value-of [ select = "@xml:id" ]
      " is pointed at by a prev= but does not have a next="
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "not( @prev ) and $isAnext"
      sqf:fix = "prevless"
      "Element "
      sch:value-of [ select = "@xml:id" ]
      " is pointed at by a next= but does not have a prev="
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id =
    "wwp-store-att.global.linking-next-prev-point-appropriately-constraint-rule-38"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@prev|@next"
    "\x{a}" ~
    "         "
    sch:let [ name = "element" value = ".." ]
    "\x{a}" ~
    "         "
    sch:let [ name = "me" value = "normalize-space(.)" ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "ptr"
      value =
        "if ( starts-with( $me,'#') ) then substring-after( $me,'#') else 'ERROR!?!'"
    ]
    "\x{a}" ~
    "         "
    sch:let [ name = "hasSpace" value = "contains( $me,' ')" ]
    "\x{a}" ~
    "         "
    sch:let [ name = "points2local" value = "exists( id( $ptr ) )" ]
    "\x{a}" ~
    "         "
    sch:let [ name = "points2same" value = "id( $ptr ) is $element" ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "points2sameGI"
      value = "name( $element ) eq name( id( $ptr ) )"
    ]
    "\x{a}" ~
    "         "
    sch:let [ name = "pointsAfter" value = "id( $ptr ) >> $element" ]
    "\x{a}" ~
    "         "
    sch:let [ name = "pointsBefore" value = "$element >> id( $ptr )" ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "msg_part_1"
      value =
        """concat(                                   '@',                                   name(.),                                   ' of ＜',                                   name( $element ),                                   '＞ ',                                   if (../@xml:id)                                     then concat('(with @xml:id "', ../@xml:id,'")')                                     else ''                                 )"""
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "$hasSpace"
      "\x{a}" ~
      "            "
      sch:value-of [ select = "$msg_part_1" ]
      " has more than 1 pointer (a space in a URI should be written '%20')"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "if ( not( $hasSpace ) ) then ( $points2local ) else true()"
      "\x{a}" ~
      "            "
      sch:value-of [ select = "$msg_part_1" ]
      " does not point to a local element."
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test =
        "if ( not( $hasSpace ) ) then ( $points2same ) else false()"
      "\x{a}" ~
      "            "
      sch:value-of [ select = "$msg_part_1" ]
      " points to itself."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "if ( not( $hasSpace ) and $points2local ) then ( $points2sameGI ) else true()"
      "\x{a}" ~
      "            "
      sch:value-of [ select = "$msg_part_1" ]
      " points to a ＜"
      sch:value-of [ select = "name( id( $ptr ) )" ]
      "＞ (it should point to another ＜"
      sch:value-of [ select = "name( $element )" ]
      "＞)."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "if ( not( $hasSpace ) and $points2local and local-name(.) eq 'prev' and not( $points2same ) ) then ( $pointsBefore ) else 'true()'"
      "\x{a}" ~
      "            "
      sch:value-of [ select = "$msg_part_1" ]
      " points to a ＜"
      sch:value-of [ select = "name( id( $ptr ) )" ]
      "＞ that is after itself."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "if ( not( $hasSpace ) and $points2local and local-name(.) eq 'next' and not( $points2same ) ) then ( $pointsAfter ) else 'true()'"
      "\x{a}" ~
      "            "
      sch:value-of [ select = "$msg_part_1" ]
      " points to a ＜"
      sch:value-of [ select = "name( id( $ptr ) )" ]
      "＞ that is prior to itself."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]

ws_link =
  ## (link) defines an association or hypertextual link among elements or passages, of some type not more precisely specifiable by other elements. [16.1. Links]
  element link {
    empty
    >> sch:pattern [
         id = "wwp-store-link-linkTargets3-constraint-assert-40"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(normalize-space(@target),' ')"
             "You must supply at least two values for @target or  on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.pointing.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      [
        a:documentation [
          "for cases when sections of text are grouped in a way not otherwise reflected in the encoding (e.g., two "
          ns1:code [ "<row>" ]
          "s in a "
          ns1:code [ "<table>" ]
          " are braced to indicate a shared relationship)"
        ]
      ]
      "grouped"
    }?,
    empty
  }

ws_linkGrp =
  ## (link group) defines a collection of associations or hypertextual links. [16.1. Links]
  element linkGrp {
    (ws_model.descLike*, (ws_link | ws_ptr)+),
    ws_att.global.attributes,
    ws_att.pointing.group.attributes,
    empty
  }

ws_ab =
  ## (anonymous block) contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph. [16.3. Blocks, Segments, and Anchors]
  element ab {
    ws_macro.paraContent
    >> sch:pattern [
         id =
           "wwp-store-ab-abstractModel-structure-ab-in-ab-or-p-constraint-report-40"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ab"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "    (ancestor::tei:p or ancestor::tei:ab)                          and not( ancestor::tei:floatingText                                  |parent::tei:exemplum                                 |parent::tei:item                                 |parent::tei:note                                 |parent::tei:q                                 |parent::tei:quote                                 |parent::tei:remarks                                 |parent::tei:said                                 |parent::tei:sp                                 |parent::tei:stage                                 |parent::tei:cell                                 |parent::tei:figure                                )"
             "\x{a}" ~
             "        Abstract model violation: ab may not occur inside paragraphs or other ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-ab-abstractModel-structure-ab-in-l-or-lg-constraint-report-41"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ab"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "    (ancestor::tei:l or ancestor::tei:lg)                         and not( ancestor::tei:floatingText                                 |parent::tei:figure                                 |parent::tei:note                                )"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level divisions such as p or ab, unless ab is a child of figure or note, or is a descendant of floatingText.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.declaring.attributes,
    ws_att.fragmentable.attributes,
    ws_att.written.attributes,
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      "caption" | "issue" | "commentary" | "timelineitem" | "placeholder"
    }?,
    empty
  }

ws_anchor =
  ## (anchor point) attaches an identifier to a point within a text, whether or not it corresponds with a textual element. [8.4.2. Synchronization and Overlap 16.5. Correspondence and Alignment]
  element anchor {
    empty,
    ws_att.global.attribute.n,
    ws_att.global.attribute.xmllang,
    ws_att.global.attribute.xmlbase,
    ws_att.global.attribute.xmlspace,
    ws_att.global.rendition.attribute.rend,
    ws_att.global.rendition.attribute.style,
    ws_att.global.rendition.attribute.rendition,
    ws_att.global.linking.attribute.corresp,
    ws_att.global.linking.attribute.sameAs,
    ws_att.global.linking.attribute.next,
    ws_att.global.linking.attribute.prev,
    ws_att.global.change.attribute.change,
    ws_att.global.responsibility.attribute.cert,
    ws_att.global.responsibility.attribute.resp,
    ws_att.global.source.attribute.source,
    ws_att.typed.attributes,
    ## (identifier) provides a unique identifier for the element bearing the attribute.
    attribute xml:id { xsd:ID },
    empty
  }

ws_seg =
  ## (arbitrary segment) represents any segmentation of text below the chunk level. [16.3. Blocks, Segments, and Anchors 6.2. Components of the Verse Line 7.2.5. Speech Contents]
  element seg {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.segLike.attributes,
    ws_att.typed.attributes,
    ws_att.written.attributes,
    ws_att.notated.attributes,
    empty
  }

ws_alt =
  ## (alternation) identifies an alternation or a set of choices among elements or passages. [16.8. Alternation]
  element alt {
    empty,
    ws_att.global.attributes,
    ws_att.pointing.attribute.targetLang,
    ws_att.pointing.attribute.evaluate,
    ws_att.typed.attributes,
    ## specifies the destination of the reference by supplying one or more URI References
    attribute target {
      list { xsd:anyURI, xsd:anyURI, xsd:anyURI* }
    }?,
    ## states whether the alternations gathered in this collection are exclusive or inclusive.
    attribute mode {
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the alternatives occurs.
      "excl" | ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of the alternatives occur.
        "incl"
    }?,
    [
      a:documentation [
        "If "
        ns1:code [ "@mode" ]
        " is excl, each weight states the probability that the corresponding alternative occurs. If "
        ns1:code [ "@mode" ]
        " is incl each weight states the probability that the corresponding alternative occurs given that at least one of the other alternatives occurs."
      ]
    ]
    attribute weights {
      list { xsd:double, xsd:double, xsd:double* }
    }?,
    empty
  }
ws_altGrp =
  [
    a:documentation [
      "(alternation group) groups a collection of "
      ns1:code [ "<alt>" ]
      " elements and possibly pointers. [16.8. Alternation]"
    ]
  ]
  element altGrp {
    (ws_model.descLike*, (ws_alt | ws_ptr)*),
    ws_att.global.attributes,
    ws_att.pointing.group.attributes,
    ## states whether the alternations gathered in this collection are exclusive or inclusive.
    [ a:defaultValue = "excl" ]
    attribute mode {
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the alternatives occurs.
      "excl" | ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of the alternatives occur.
        "incl"
    }?,
    empty
  }
ws_att.msExcerpt.attributes = ws_att.msExcerpt.attribute.defective
ws_att.msExcerpt.attribute.defective =
  ## indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage.
  attribute defective {
    xsd:boolean
    | (
       "unknown" | "inapplicable")
  }?

ws_dimensions =
  ## (dimensions) contains a dimensional specification. [10.3.4. Dimensions]
  element dimensions {
    (ws_format | (ws_height, ws_width?) | ws_width)
    >> sch:pattern [
         id = "wwp-store-dimensions-duplicateDim-constraint-report-42"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:width)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:height)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:depth)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.dimensions.attributes,
    ws_att.typed.attribute.subtype,
    ## indicates which aspect of the object is being measured.
    ## Sample values include: 1] leaves; 2] ruled; 3] pricked; 4] written; 5] miniatures; 6] binding; 7] box
    attribute type {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_height =
  ## (height) contains a measurement measured along the axis at a right angle to the bottom of the object. [10.3.4. Dimensions]
  element height {
    ws_macro.xtext,
    ws_att.global.attributes,
    ws_att.dimensions.attributes,
    empty
  }

ws_width =
  ## (width) contains a measurement of an object along the axis parallel to its bottom, e.g. perpendicular to the spine of a book or codex. [10.3.4. Dimensions]
  element width {
    ws_macro.xtext,
    ws_att.global.attributes,
    ws_att.dimensions.attributes,
    empty
  }
ws_att.datable.custom.attributes =
  ws_att.datable.custom.attribute.when-custom,
  ws_att.datable.custom.attribute.notBefore-custom,
  ws_att.datable.custom.attribute.notAfter-custom,
  ws_att.datable.custom.attribute.from-custom,
  ws_att.datable.custom.attribute.to-custom,
  ws_att.datable.custom.attribute.datingPoint,
  ws_att.datable.custom.attribute.datingMethod
ws_att.datable.custom.attribute.when-custom =
  ## supplies the value of a date or time in some custom standard form.
  attribute when-custom {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.datable.custom.attribute.notBefore-custom =
  ## specifies the earliest possible date for the event in some custom standard form.
  attribute notBefore-custom {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.datable.custom.attribute.notAfter-custom =
  ## specifies the latest possible date for the event in some custom standard form.
  attribute notAfter-custom {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.datable.custom.attribute.from-custom =
  ## indicates the starting point of the period in some custom standard form.
  attribute from-custom {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.datable.custom.attribute.to-custom =
  ## indicates the ending point of the period in some custom standard form.
  attribute to-custom {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
    }
  }?
ws_att.datable.custom.attribute.datingPoint =
  ## supplies a pointer to some location defining a named point in time with reference to which the datable item is understood to have occurred
  attribute datingPoint { xsd:anyURI }?
ws_att.datable.custom.attribute.datingMethod =
  [
    a:documentation [
      "supplies a pointer to a "
      ns1:code [ "<calendar>" ]
      " element or other means of interpreting the values of the custom dating attributes."
    ]
  ]
  attribute datingMethod { xsd:anyURI }?
ws_model.persNamePart = notAllowed
ws_model.persNamePart_alternation = notAllowed
ws_model.persNamePart_sequence = empty
ws_model.persNamePart_sequenceOptional = empty
ws_model.persNamePart_sequenceOptionalRepeatable = empty
ws_model.persNamePart_sequenceRepeatable = notAllowed
ws_att.datable.iso.attributes =
  ws_att.datable.iso.attribute.when-iso,
  ws_att.datable.iso.attribute.notBefore-iso,
  ws_att.datable.iso.attribute.notAfter-iso,
  ws_att.datable.iso.attribute.from-iso,
  ws_att.datable.iso.attribute.to-iso
ws_att.datable.iso.attribute.when-iso =
  ## supplies the value of a date or time in a standard form.
  attribute when-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
ws_att.datable.iso.attribute.notBefore-iso =
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
ws_att.datable.iso.attribute.notAfter-iso =
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
ws_att.datable.iso.attribute.from-iso =
  ## indicates the starting point of the period in standard form.
  attribute from-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
ws_att.datable.iso.attribute.to-iso =
  ## indicates the ending point of the period in standard form.
  attribute to-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?

ws_orgName =
  ## (organization name) contains an organizational name. [13.2.2. Organizational Names]
  element orgName {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.datable.attributes,
    ws_att.editLike.attributes,
    ws_att.personal.attributes,
    ws_att.typed.attributes,
    empty
  }

ws_persName =
  ## (personal name) contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. [13.2.1. Personal Names]
  element persName {
    ws_macro.phraseSeq
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "wwp:persName[@ref][/wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef]                                    | wwp:change[@who][/wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef]                                    | *[@author][/wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef]                                    | *[@resp][/wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "path"
             value = "'https://www.wwp-test.neu.edu/wwo/texts/'"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "att"
             value =
               "if      (self::wwp:persName and @resp) then 'UNDETERMINED'                                              else if (self::wwp:persName)           then 'ref'                                              else if (self::wwp:change and @resp)   then 'UNDETERMINED'                                              else if (self::wwp:change)             then 'who'                                              else if ( self::wwp:p                                                      | self::wwp:gloss                                                      | self::wwp:term                                                      | self::wwp:ptr                                                      | self::wwp:ref                                                      | self::wwp:graphic                                                      | self::wwp:lg                                                      | self::wwp:ab                                                      | self::wwp:text                                                      | self::wwp:body                                                      | self::wwp:group                                                      | self::wwp:floatingText                                                      | self::wwp:div                                                      | self::wwp:postscript                                                      | self::wwp:front                                                      | self::wwp:back  and  @resp)  then 'UNDETERMINED'                                              else if ( self::wwp:p                                                      | self::wwp:gloss                                                      | self::wwp:term                                                      | self::wwp:ptr                                                      | self::wwp:ref                                                      | self::wwp:graphic                                                      | self::wwp:lg                                                      | self::wwp:ab                                                      | self::wwp:text                                                      | self::wwp:body                                                      | self::wwp:group                                                      | self::wwp:floatingText                                                      | self::wwp:div                                                      | self::wwp:postscript                                                      | self::wwp:front                                                      | self::wwp:back)              then 'author'                                              else                                        'resp'                                              "
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "val"
             value =
               "normalize-space( string-join( ( @ref, @who, @resp, @author ), ' ') )"
           ]
           "\x{a}" ~
           "               "
           sch:let [ name = "gi" value = "local-name(.)" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "REFs"
             value = "tokenize( normalize-space( $val ), ' ')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "PREFs"
             value = "for $r in $REFs return substring-before( $r,':')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "URLs"
             value =
               "for $p in $PREFs return                                   concat( $path, substring-before( /wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef//wwp:prefixDef[ @ident eq $p ]/@replacementPattern, '#' ) )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "KEYs"
             value = "for $r in $REFs return substring-after( $r,':')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "PERSONs"
             value =
               "for $k in $KEYs return                                     if ( count( index-of( $KEYs, $k ) ) eq 1 )                                     then                                        if ( doc-available( $URLs[ index-of( $KEYs, $k )] ) )                                       then                                         if ( document( $URLs[ index-of( $KEYs, $k )] )//TEI:*[ @xml:id eq $k ] )                                         then                                           document( $URLs[ index-of( $KEYs, $k )] )//TEI:*[ @xml:id eq $k ]                                         else .                                       else .                                     else ."
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "count( $REFs ) eq 0"
             "Empty @"
             sch:value-of [ select = "$att" ]
             " of ＜"
             sch:value-of [ select = "$gi" ]
             "＞"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "count( $PERSONs[ not( self::TEI:person ) ] ) gt 0"
             "Each pointer in the "
             sch:value-of [ select = "$att" ]
             " attribute of ＜"
             sch:value-of [ select = "$gi" ]
             '＞ should point to a ＜person＞, but the pointers in this one ("'
             sch:value-of [ select = "$val" ]
             '") point to: '
             sch:value-of [
               select =
                 "if ( not( $PERSONs ) )                           then 'nowhere'                           else for $p in $PERSONs return                             if ( $p is . )                             then ' nothing'                             else concat(' ＜', name($p), '＞')"
             ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.datable.attributes,
    ws_att.editLike.attributes,
    ws_att.personal.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      "properAdjective" | "regularized" | "titlePage" | "person-female" | "person" | "person-male"
    }?,
    empty
  }

ws_placeName =
  ## (place name) contains an absolute or relative place name. [13.2.3. Place Names]
  element placeName {
    ws_macro.phraseSeq
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "wwp:placeName[@ref][/wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "path"
             value = "'https://www.wwp-test.neu.edu/wwo/texts/'"
           ]
           "\x{a}" ~
           "               "
           sch:let [ name = "val" value = "normalize-space( @ref )" ]
           "\x{a}" ~
           "               "
           sch:let [ name = "gi" value = "local-name(.)" ]
           "\x{a}" ~
           "               "
           sch:let [ name = "REFs" value = "tokenize( $val, ' ')" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "PREFs"
             value = "for $r in $REFs return substring-before( $r,':')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "URLs"
             value =
               "for $p in $PREFs return                                   concat( $path, substring-before( /wwp:TEI/wwp:teiHeader/wwp:encodingDesc/wwp:listPrefixDef//wwp:prefixDef[ @ident eq $p ]/@replacementPattern, '#' ) )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "KEYs"
             value = "for $r in $REFs return substring-after( $r,':')"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "PLACEs"
             value =
               "for $k in $KEYs return                                     if ( doc-available( $URLs[ index-of( $KEYs, $k )] ) )                                     then                                       if ( document( $URLs[ index-of( $KEYs, $k )] )//TEI:*[ @xml:id eq $k ] )                                       then                                         document( $URLs[ index-of( $KEYs, $k )] )//TEI:*[ @xml:id eq $k ]                                       else .                                     else ."
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "count( $REFs ) eq 0"
             "Empty @ref of ＜placeName＞"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "count( $PLACEs[ not(                                     self::TEI:place ) ] ) gt 0"
             'Each pointer in the @ref attribute of ＜placeName＞ should point to a ＜place＞, but the pointers in this one ("'
             sch:value-of [ select = "$val" ]
             '") point to: '
             sch:value-of [
               select =
                 "if ( not( $PLACEs ) )                           then 'nowhere'                           else for $p in $PLACEs return                             if ( $p is . )                             then ' nothing'                             else concat(' ＜', name($p), '＞')"
             ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.datable.attributes,
    ws_att.editLike.attributes,
    ws_att.global.attributes,
    ws_att.personal.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      "properAdjective"
    }?,
    empty
  }
ws_att.translatable.attributes =
  ws_att.translatable.attribute.versionDate
ws_att.translatable.attribute.versionDate =
  ## specifies the date on which the source text was extracted and sent to the translator
  attribute versionDate {
    xsd:date { pattern = "(19[789][0-9]|[2-9][0-9]{3}).*" }
    | xsd:dateTime { pattern = "(19[789][0-9]|[2-9][0-9]{3}).*" }
  }?

ws_att =
  ## (attribute) contains the name of an attribute appearing within running text. [22. Documentation Elements]
  element att {
    xsd:Name,
    ws_att.global.attributes,
    ## (scheme) supplies an identifier for the scheme in which this name is defined.
    ## Sample values include: 1] TEI (Text Encoding Initiative); 2] DBK (Docbook); 3] XX (unknown); 4] imaginary (imaginary); 5] XHTML (XHTML); 6] XML (XML); 7] XI (XI)
    [ a:defaultValue = "TEI" ]
    attribute scheme {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_code =
  ## contains literal code from some formal language such as a programming language. [22.1.1. Phrase Level Terms]
  element code {
    text,
    ws_att.global.attributes,
    ## (formal language) a name identifying the formal language in which the code is expressed
    attribute lang {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_gi =
  ## (element name) contains the name (generic identifier) of an element. [22. Documentation Elements 22.5. Element Specifications]
  element gi {
    xsd:Name,
    ws_att.global.attributes,
    ## supplies the name of the scheme in which this name is defined.
    ## Sample values include: 1] TEI; 2] DBK (docbook); 3] XX (unknown); 4] Schematron; 5] HTML
    [ a:defaultValue = "TEI" ]
    attribute scheme {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }
ws_ident =
  [
    a:documentation [
      "(identifier) contains an identifier or name for an object of some kind in a formal language. "
      ns1:code [ "<ident>" ]
      " is used for tokens such as variable names, class names, type names, function names etc. in formal programming languages. [22.1.1. Phrase Level Terms]"
    ]
  ]
  element ident {
    text, ws_att.global.attributes, ws_att.typed.attributes, empty
  }

ws_tag =
  ## (tag) contains text of a complete start- or end-tag, possibly including attribute specifications, but excluding the opening and closing markup delimiter characters. [22. Documentation Elements]
  element tag {
    text,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ## indicates the type of XML tag intended
    attribute type {
      ## a start-tag, with delimiters < and > is intended
      "start" | ## an end-tag, with delimiters </ and > is intended
        "end" | ## an empty tag, with delimiters < and /> is intended
        "empty" | ## a pi (processing instruction), with delimiters <? and ?> is intended
        "pi" | ## a comment, with delimiters <!-- and --> is intended
        "comment" | ## a marked-section, with delimiters <[CDATA[ and ]]> is intended
        "ms"
    }?,
    ## supplies the name of the schema in which this tag is defined.
    ## Sample values include: 1] TEI (text encoding initiative); 2] DBK (docbook); 3] XX (unknown); 4] Schematron; 5] HTML
    [ a:defaultValue = "TEI" ]
    attribute scheme {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_val =
  ## (value) contains a single attribute value. [22. Documentation Elements 22.5.3. Attribute List Specification]
  element val { text, ws_att.global.attributes, empty }
ws_TEI =
  [
    a:documentation [
      "(TEI document) contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple "
      ns1:code [ "<TEI>" ]
      " elements may be combined within a "
      ns1:code [ "<TEI>" ]
      " (or "
      ns1:code [ "<teiCorpus>" ]
      ") element. [4. Default Text Structure 15.1. Varieties of Composite Text]"
    ]
  ]
  element TEI {
    (ws_teiHeader, ws_text)
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [ prefix = "xs" uri = "http://www.w3.org/2001/XMLSchema" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ## specifies the version number of the TEI Guidelines against which this document is valid.
    attribute version {
      xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
    }?,
    empty
  }

ws_text =
  ## (text) contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4. Default Text Structure 15.1. Varieties of Composite Text]
  element text {
    (ws_model.global*,
     (ws_hyperDiv, ws_model.global*)?,
     (ws_front, ws_model.global*)?,
     (ws_body | ws_group),
     ws_model.global*,
     (ws_back, ws_model.global*)?)
    >> sch:pattern [
         id =
           "wwp-store-text-sub-text-ID-matches-text-constraint-rule-41"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "/wwp:TEI/wwp:teiHeader/wwp:text//wwp:text"
           "\x{a}" ~
           "               "
           sch:let [
             name = "textID"
             value = "normalize-space( /wwp:TEI/wwp:text/@xml:id )"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "substring( normalize-space( @xml:id ), 1, 7 ) eq substring( $textID, 1, 7 )"
             "sub-text TR# "
             sch:value-of [ select = "@xml:id" ]
             " does not match main text TR# "
             sch:value-of [ select = "$textID" ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.structuralCategorization.attributes,
    ws_att.global.attribute.n,
    ws_att.global.attribute.xmllang,
    ws_att.global.attribute.xmlbase,
    ws_att.global.attribute.xmlspace,
    ws_att.global.rendition.attribute.rend,
    ws_att.global.rendition.attribute.style,
    ws_att.global.rendition.attribute.rendition,
    ws_att.global.linking.attribute.corresp,
    ws_att.global.linking.attribute.sameAs,
    ws_att.global.linking.attribute.next,
    ws_att.global.linking.attribute.prev,
    ws_att.global.change.attribute.change,
    ws_att.global.responsibility.attribute.cert,
    ws_att.global.responsibility.attribute.resp,
    ws_att.global.source.attribute.source,
    ws_att.declaring.attributes,
    ws_att.written.attributes,
    ## (identifier) provides a unique identifier for the element bearing the attribute.
    attribute xml:id { xsd:ID },
    empty
  }

ws_body =
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. Default Text Structure]
  element body {
    (ws_model.global*,
     (ws_model.divTop, (ws_model.global | ws_model.divTop)*)?,
     (ws_model.divGenLike, (ws_model.global | ws_model.divGenLike)*)?,
     ((ws_model.divLike, (ws_model.global | ws_model.divGenLike)*)+
      | (ws_model.div1Like, (ws_model.global | ws_model.divGenLike)*)+
      | (((ws_model.common), ws_model.global*)+,
         ((ws_model.divLike, (ws_model.global | ws_model.divGenLike)*)+
          | (ws_model.div1Like,
             (ws_model.global | ws_model.divGenLike)*)+)?)),
     (ws_model.divBottom, ws_model.global*)*),
    ws_att.structuralCategorization.attributes,
    ws_att.global.attributes,
    ws_att.declaring.attributes,
    empty
  }

ws_group =
  ## (group) contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. [4. Default Text Structure 4.3.1. Grouped Texts 15.1. Varieties of Composite Text]
  element group {
    ((ws_model.divTop | ws_model.global)*,
     ((ws_text | ws_group), (ws_text | ws_group | ws_model.global)*),
     ws_model.divBottom*),
    ws_att.global.attributes,
    ws_att.declaring.attributes,
    ws_att.typed.attributes,
    empty
  }

ws_floatingText =
  ## (floating text) contains a single text of any kind, whether unitary or composite, which interrupts the text containing it at any point and after which the surrounding text resumes. [4.3.2. Floating Texts]
  element floatingText {
    (ws_model.global*,
     (ws_hyperDiv, ws_model.global*)?,
     (ws_front, ws_model.global*)?,
     (ws_body | ws_group),
     ws_model.global*,
     (ws_back, ws_model.global*)?)
    >> sch:pattern [
         id =
           "wwp-store-floatingText-floating-text-ID-matches-text-constraint-assert-42"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:floatingText"
           "\x{a}" ~
           "               "
           sch:let [
             name = "textID"
             value = "normalize-space( /wwp:TEI/wwp:text/@xml:id )"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "substring( normalize-space( @xml:id ), 1, 7 ) eq substring( $textID, 1, 7 )"
             "floatingText TR# "
             sch:value-of [ select = "@xml:id" ]
             " does not match main text TR# "
             sch:value-of [ select = "$textID" ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.structuralCategorization.attributes,
    ws_att.global.attribute.n,
    ws_att.global.attribute.xmllang,
    ws_att.global.attribute.xmlbase,
    ws_att.global.attribute.xmlspace,
    ws_att.global.rendition.attribute.rend,
    ws_att.global.rendition.attribute.style,
    ws_att.global.rendition.attribute.rendition,
    ws_att.global.linking.attribute.corresp,
    ws_att.global.linking.attribute.sameAs,
    ws_att.global.linking.attribute.next,
    ws_att.global.linking.attribute.prev,
    ws_att.global.change.attribute.change,
    ws_att.global.responsibility.attribute.cert,
    ws_att.global.responsibility.attribute.resp,
    ws_att.global.source.attribute.source,
    ws_att.declaring.attributes,
    ## (identifier) provides a unique identifier for the element bearing the attribute.
    attribute xml:id { xsd:ID },
    empty
  }

ws_div =
  ## (text division) contains a subdivision of the front, body, or back of a text. [4.1. Divisions of the Body]
  element div {
    ((ws_model.divTop | ws_model.global)*,
     (((ws_model.divLike | ws_model.divGenLike), ws_model.global*)+
      | ((ws_model.common, ws_model.global*)+,
         ((ws_model.divLike | ws_model.divGenLike),
          ws_model.global*)*))?,
     (ws_model.divBottom, ws_model.global*)*)
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "descendant::tei:div or                                     descendant::tei:l[ not( ancestor::tei:epigraph )] or                                     descendant::tei:ab[ not( ancestor::tei:epigraph )] or                                     descendant::tei:p[ not( ancestor::tei:epigraph )] or                                     descendant::tei:floatingText[ not( ancestor::tei:epigraph )] or                                     descendant::tei:lg[ not( ancestor::tei:epigraph )] or                                     descendant::tei:sp[ not( ancestor::tei:epigraph )] or                                     descendant::tei:bibl[ not( ancestor::tei:epigraph )] or                                     descendant::tei:biblFull or                                     descendant::tei:biblStruct[ not( ancestor::tei:epigraph )] or                                     descendant::tei:list[ not( ancestor::tei:epigraph )] or                                     descendant::tei:listBibl[ not( ancestor::tei:epigraph )] or                                     descendant::tei:table[ not( ancestor::tei:epigraph )] or                                     descendant::tei:listEvent or                                     descendant::tei:quote[ not( ancestor::tei:epigraph )] or                                     descendant::tei:stage[ not( ancestor::tei:epigraph )] or                                     descendant::tei:castList[ not( ancestor::tei:epigraph )] or                                     descendant::tei:gap[ not( ancestor::tei:epigraph )] or                                     descendant::tei:join or                                     descendant::tei:joinGrp or                                     descendant::wwp:advertisement[ not( ancestor::tei:epigraph )] or                                     descendant::tei:note[ not( ancestor::tei:epigraph )] or                                     descendant::tei:figure[ not( ancestor::tei:epigraph )] or                                     descendant::wwp:unknown[ not( ancestor::tei:epigraph )] or                                     descendant::tei:trailer or                                     descendant::wwp:elision[ not( ancestor::tei:epigraph )]"
             "<"
             sch:name [ ]
             "> with no significant content (i.e., none of: ab advertisement bibl biblFull biblStruct castList div elision figure floatingText gap join joinGrp l lg list listBibl listEvent note p quote sp stage trailer unknown)"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-div-avoid_model.divTop_in_middle-constraint-rule-43"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:div"
           "\x{a}" ~
           "               "
           sch:let [
             name = "model.divTop_self"
             value =
               "self::wwp:argument  |  self::wwp:dateline |  self::wwp:desc |  self::wwp:docDate |  self::wwp:docRole |  self::wwp:epigraph |  self::wwp:head |  self::wwp:label |  self::wwp:opener |  self::wwp:respLine"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "model.divTop_child"
             value =
               "child::wwp:argument | child::wwp:dateline | child::wwp:desc | child::wwp:docDate | child::wwp:docRole | child::wwp:epigraph | child::wwp:head | child::wwp:label | child::wwp:opener | child::wwp:respLine"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "model.global_self"
             value =
               "self::wwp:add  |  self::wwp:addSpan |  self::wwp:advertisement |  self::wwp:alt |  self::wwp:anchor |  self::wwp:cb |  self::wwp:damageSpan |  self::wwp:delSpan |  self::wwp:elision |  self::wwp:figure |  self::wwp:gap |  self::wwp:lb |  self::wwp:link |  self::wwp:listTranspose |  self::wwp:metamark |  self::wwp:milestone |  self::wwp:mw |  self::wwp:note |  self::wwp:pb |  self::wwp:space |  self::wwp:substJoin |  self::wwp:unknown"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "model.global_child"
             value =
               "child::wwp:add | child::wwp:addSpan | child::wwp:advertisement | child::wwp:alt | child::wwp:anchor | child::wwp:cb | child::wwp:damageSpan | child::wwp:delSpan | child::wwp:elision | child::wwp:figure | child::wwp:gap | child::wwp:lb | child::wwp:link | child::wwp:listTranspose | child::wwp:metamark | child::wwp:milestone | child::wwp:mw | child::wwp:note | child::wwp:pb | child::wwp:space | child::wwp:substJoin | child::wwp:unknown"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "model.common_self"
             value =
               "self::wwp:ab  |  self::wwp:bibl |  self::wwp:biblStruct |  self::wwp:castList |  self::wwp:desc |  self::wwp:floatingText |  self::wwp:l |  self::wwp:label |  self::wwp:lg |  self::wwp:list |  self::wwp:listBibl |  self::wwp:p |  self::wwp:q |  self::wwp:quote |  self::wwp:said |  self::wwp:sp |  self::wwp:spGrp |  self::wwp:stage |  self::wwp:table"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "model.common_child"
             value =
               "child::wwp:ab | child::wwp:bibl | child::wwp:biblStruct | child::wwp:castList | child::wwp:desc | child::wwp:floatingText | child::wwp:l | child::wwp:label | child::wwp:lg | child::wwp:list | child::wwp:listBibl | child::wwp:p | child::wwp:q | child::wwp:quote | child::wwp:said | child::wwp:sp | child::wwp:spGrp | child::wwp:stage | child::wwp:table"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "( not( child::wwp:div | $model.common_child ) ) and ( $model.divTop_child )[last()]/preceding-sibling::*[ self::wwp:add |  self::wwp:addSpan |  self::wwp:advertisement |  self::wwp:alt |  self::wwp:anchor |  self::wwp:cb |  self::wwp:damageSpan |  self::wwp:delSpan |  self::wwp:elision |  self::wwp:figure |  self::wwp:gap |  self::wwp:lb |  self::wwp:link |  self::wwp:listTranspose |  self::wwp:metamark |  self::wwp:milestone |  self::wwp:mw |  self::wwp:note |  self::wwp:pb |  self::wwp:space |  self::wwp:substJoin |  self::wwp:unknown ]"
             "This ＜div＞ seems to have a divTop element (e.g. ＜head＞) in the middle"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-div-abstractModel-structure-div-in-l-or-lg-constraint-report-50"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "(ancestor::tei:l or ancestor::tei:lg) and not(ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-div-abstractModel-structure-div-in-ab-or-p-constraint-report-51"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "(ancestor::tei:p or ancestor::tei:ab) and not(ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: p and ab may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.structuralCategorization.attributes,
    ws_att.global.attributes,
    ws_att.divLike.attributes,
    ws_att.declaring.attributes,
    ws_att.written.attributes,
    empty
  }

ws_trailer =
  ## contains a closing title or footer appearing at the end of a division of a text. [4.2.4. Content of Textual Divisions 4.2. Elements Common to All Divisions]
  element trailer {
    (text
     | ws_lg
     | ws_model.gLike
     | ws_model.phrase
     | ws_model.inter
     | ws_model.lLike
     | ws_model.global)*,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.written.attributes,
    empty
  }

ws_byline =
  ## (byline) contains a statement of responsibility given for a work on its title page or at the head or end of the work. [4.2.2. Openers and Closers 4.5. Front Matter]
  element respLine {
    (text
     | ws_model.gLike
     | ws_model.phrase
     | ws_docAuthor
     | ws_model.global)*,
    ws_att.global.attributes,
    empty
  }

ws_dateline =
  ## (dateline) contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer. [4.2.2. Openers and Closers]
  element dateline {
    (text
     | ws_model.gLike
     | ws_model.phrase
     | ws_model.global
     | ws_docDate)*,
    ws_att.global.attributes,
    empty
  }

ws_argument =
  ## (argument) contains a formal list or prose description of the topics addressed by a subdivision of a text. [4.2. Elements Common to All Divisions 4.6. Title Pages]
  element argument {
    ((ws_model.global | ws_model.headLike)*,
     (ws_model.common, ws_model.global*)+),
    ws_att.global.attributes,
    empty
  }

ws_epigraph =
  ## (epigraph) contains a quotation, anonymous or attributed, appearing at the start or end of a section or on a title page. [4.2.3. Arguments, Epigraphs, and Postscripts 4.2. Elements Common to All Divisions 4.6. Title Pages]
  element epigraph {
    (ws_model.common | ws_model.global)*,
    ws_att.global.attributes,
    empty
  }

ws_opener =
  ## (opener) groups together dateline, byline, salutation, and similar phrases appearing as a preliminary group at the start of a division, especially of a letter. [4.2. Elements Common to All Divisions]
  element opener {
    (text
     | ws_model.gLike
     | ws_model.phrase
     | ws_argument
     | ws_byline
     | ws_dateline
     | ws_epigraph
     | ws_salute
     | ws_signed
     | ws_model.global)*,
    ws_att.global.attributes,
    ws_att.written.attributes,
    empty
  }

ws_closer =
  ## (closer) groups together salutations, datelines, and similar phrases appearing as a final group at the end of a division, especially of a letter. [4.2.2. Openers and Closers 4.2. Elements Common to All Divisions]
  element closer {
    (text
     | ws_model.gLike
     | ws_signed
     | ws_dateline
     | ws_salute
     | ws_model.phrase
     | ws_model.global)*,
    ws_att.global.attributes,
    ws_att.written.attributes,
    empty
  }

ws_salute =
  ## (salutation) contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. [4.2.2. Openers and Closers]
  element salute {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.written.attributes,
    empty
  }

ws_signed =
  ## (signature) contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text. [4.2.2. Openers and Closers]
  element signed {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.written.attributes,
    empty
  }

ws_postscript =
  ## contains a postscript, e.g. to a letter. [4.2. Elements Common to All Divisions]
  element postscript {
    ws_macro.noteContent,
    ws_att.declaring.attributes,
    ws_att.global.attributes,
    ws_att.written.attributes,
    empty
  }

ws_titlePage =
  ## (title block) used to to encode the contents of title pages, acting as a container or wrapper for the title page's discrete elements. [4.6. Title Pages]
  element titleBlock {
    (ws_model.global*,
     ws_model.titlepagePart,
     (ws_model.titlepagePart | ws_model.global)*),
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ## classifies the title block.
    [ a:defaultValue = "titlePage" ]
    attribute type {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    empty
  }

ws_titlePart =
  ## (title part) contains a subsection or division of the title of a work, as indicated on a title page. [4.6. Title Pages]
  element titlePart {
    (ws_macro.paraContent | ws_docAuthor)+,
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    attribute type {
      "address" | "alt" | "date" | "desc" | "main" | "reason" | "second" | "sub" | "vol"
    },
    empty
  }

ws_docAuthor =
  ## (document role) contains an indication of a person or organization who played a significant role in the production of the source book, as given on the title page (often but not always contained in a byline). [4.6. Title Pages]
  element docRole {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    attribute type {
      ## A person who has written some or all of the main content of the text
      "author" | ## A person who has edited the text without contributing to its main content (adding annotations or providing other editorial oversight)
        "editor" | ## A person who has translated the main content of the text from one language into another
        "translator" | ## A person or entity responsible for the publication (i.e. the sponsorship of the production and dissemination) of the work; in some cases this may be the author
        "publisher" | ## A person or entity responsible for the physical printing process
        "printer" | ## A person or entity responsible for the sale and distribution of the work
        "bookseller" | ## A person or entity who undertook both responsibilities or performed both tasks
        "printer-publisher" | "licensee" | "licensor" | "uncertain"
    },
    empty
  }

ws_imprimatur =
  ## (imprimatur) contains a formal statement authorizing the publication of a work, sometimes required to appear on a title page or its verso. [4.6. Title Pages]
  element imprimatur {
    (ws_macro.paraContent | ws_docAuthor)+,
    ws_att.global.attributes,
    empty
  }

ws_docEdition =
  ## (document edition) contains an edition statement as presented on a title page of a document. [4.6. Title Pages]
  element docEdition {
    ws_macro.paraContent, ws_att.global.attributes, empty
  }

ws_docImprint =
  ## (document imprint) contains the imprint statement (place and date of publication, publisher name), as given (usually) at the foot of a title page. [4.6. Title Pages]
  element docImprint {
    (text
     | ws_model.gLike
     | ws_model.phrase
     | ws_pubPlace
     | ws_docDate
     | ws_publisher
     | ws_docAuthor
     | ws_docSale
     | ws_model.global)*,
    ws_att.global.attributes,
    empty
  }

ws_docDate =
  ## (document date) contains the date of a document, as given on a title page or in a dateline. [4.6. Title Pages]
  element docDate {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ## (when) gives the value of the date in standard form, i.e. YYYY-MM-DD.
    attribute when {
      xsd:date
      | xsd:gYear
      | xsd:gMonth
      | xsd:gDay
      | xsd:gYearMonth
      | xsd:gMonthDay
      | xsd:time
      | xsd:dateTime
    }?,
    empty
  }

ws_front =
  ## (front matter) contains any prefatory matter (headers, abstracts, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. [4.6. Title Pages 4. Default Text Structure]
  element front {
    ((ws_model.frontPart
      | ws_model.pLike
      | ws_model.pLike.front
      | ws_model.global)*,
     (((ws_model.div1Like,
        (ws_model.div1Like | ws_model.frontPart | ws_model.global)*)
       | (ws_model.divLike,
          (ws_model.divLike | ws_model.frontPart | ws_model.global)*)),
      (ws_model.divBottom, (ws_model.divBottom | ws_model.global)*)?)?),
    ws_att.global.attributes,
    ws_att.declaring.attributes,
    empty
  }

ws_back =
  ## (back matter) contains any appendixes, etc. following the main part of a text. [4.7. Back Matter 4. Default Text Structure]
  element back {
    ((ws_model.frontPart
      | ws_model.pLike.front
      | ws_model.pLike
      | ws_model.listLike
      | ws_model.global)*,
     ((ws_model.div1Like,
       (ws_model.frontPart | ws_model.div1Like | ws_model.global)*)
      | (ws_model.divLike,
         (ws_model.frontPart | ws_model.divLike | ws_model.global)*))?,
     (ws_model.divBottomPart,
      (ws_model.divBottomPart | ws_titlePage | ws_model.global)*)?),
    ws_att.global.attributes,
    ws_att.declaring.attributes,
    empty
  }
ws_att.global.change.attributes = ws_att.global.change.attribute.change
ws_att.global.change.attribute.change =
  [
    a:documentation [
      "points to one or more "
      ns1:code [ "<change>" ]
      " elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder."
    ]
  ]
  attribute change {
    list { xsd:anyURI+ }
  }?
ws_att.coordinated.attributes =
  ws_att.coordinated.attribute.start,
  ws_att.coordinated.attribute.ulx,
  ws_att.coordinated.attribute.uly,
  ws_att.coordinated.attribute.lrx,
  ws_att.coordinated.attribute.lry,
  ws_att.coordinated.attribute.points
ws_att.coordinated.attribute.start =
  ## indicates the element within a transcription of the text containing at least the start of the writing represented by this zone or surface.
  attribute start { xsd:anyURI }?
ws_att.coordinated.attribute.ulx =
  ## gives the x coordinate value for the upper left corner of a rectangular space.
  attribute ulx {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
ws_att.coordinated.attribute.uly =
  ## gives the y coordinate value for the upper left corner of a rectangular space.
  attribute uly {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
ws_att.coordinated.attribute.lrx =
  ## gives the x coordinate value for the lower right corner of a rectangular space.
  attribute lrx {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
ws_att.coordinated.attribute.lry =
  ## gives the y coordinate value for the lower right corner of a rectangular space.
  attribute lry {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
ws_att.coordinated.attribute.points =
  ## identifies a two dimensional area by means of a series of pairs of numbers, each of which gives the x,y coordinates of a point on a line enclosing the area.
  attribute points {
    list {
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      }*
    }
  }?
ws_addSpan =
  [
    a:documentation [
      "(added span of text) marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also "
      ns1:code [ "<add>" ]
      "). [11.3.1.4. Additions and Deletions]"
    ]
  ]
  element addSpan {
    empty
    >> sch:pattern [
         id =
           "wwp-store-addSpan-addSpan-requires-spanTo-constraint-assert-44"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-addSpan-addSpan-requires-spanTo-fr-constraint-assert-45"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.transcriptional.attribute.cause,
    ws_att.transcriptional.attribute.seq,
    ws_att.editLike.attribute.evidence,
    ws_att.editLike.attribute.instant,
    ws_att.typed.attributes,
    ws_att.spanning.attributes,
    ws_att.dimensions.attributes,
    [
      a:documentation [
        "points to a "
        ns1:code [ "<handNote>" ]
        " element describing the hand considered responsible for the content of the element concerned."
      ]
    ]
    attribute hand { xsd:anyURI },
    empty
  }

ws_damageSpan =
  ## (damaged span of text) marks the beginning of a longer sequence of text which is damaged in some way but still legible. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element damageSpan {
    empty
    >> sch:pattern [
         id =
           "wwp-store-damageSpan-damageSpan-requires-spanTo-constraint-assert-46"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-damageSpan-damageSpan-requires-spanTo-fr-constraint-assert-47"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.damaged.attributes,
    ws_att.typed.attributes,
    ws_att.spanning.attributes,
    empty
  }

ws_delSpan =
  ## (deleted span of text) marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. [11.3.1.4. Additions and Deletions]
  element delSpan {
    empty
    >> sch:pattern [
         id =
           "wwp-store-delSpan-delSpan-requires-spanTo-constraint-assert-48"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "wwp-store-delSpan-delSpan-requires-spanTo-fr-constraint-assert-49"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.transcriptional.attributes,
    ws_att.typed.attributes,
    ws_att.spanning.attributes,
    ws_att.dimensions.attributes,
    empty
  }

ws_ex =
  ## (editorial expansion) contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. [11.3.1.2. Abbreviation and Expansion]
  element ex {
    ws_macro.xtext,
    ws_att.global.attributes,
    ws_att.editLike.attributes,
    ws_att.dimensions.attributes,
    empty
  }

ws_fw =
  ## (metawork) contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. [11.6. Headers, Footers, and Similar Matter]
  element mw {
    ws_macro.phraseSeq
    >> sch:pattern [
         id =
           "wwp-store-fw-catchword_delimiters_in_content-constraint-rule-44"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "wwp:mw[@type eq 'catch']"
           "\x{a}" ~
           "               "
           sch:report [
             test = "matches(@rend,'pre\([^#)]*\)')"
             " \x{a}" ~
             "                  Generally speaking, delimters in a catchword are encoded as content, not on @rend.\x{a}" ~
             "                "
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "matches(@rend,'post\([^#)]*\)')"
             " \x{a}" ~
             "                  Generally speaking, delimters in a catchword are encoded as content, not on @rend.\x{a}" ~
             "                "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.typed.attribute.subtype,
    ws_att.written.attributes,
    attribute type {
      ## used to signify that there is border around a page.
      "border" | ## used to signify that there is a border made of ruled lines.
        "border-rule" | ## used to signify that there is an ornamental border.
        "border-ornamental" | ## (catchword) for catch words.
        "catch" | ## (line number) for printed line numbers (usually in poetry)
        "lineNum" | ## (list (or similar) heading) for list headings. Often used in tables of contents for the page heading.
        "listHead" | ## (page number) for page numbers.
        "pageNum" | ## (press figure) for press figures. These are usually numbers, but are not sequential or regularly printed like signatures.
        "pressFig" | ## (signature) for printed signatures.
        "sig" | ## for a metawork whose function you do not know.
        "unknown" | ## (volume number) for printed volume numbers.
        "vol" | ## Anything not covered by the above values.
        "other"
    },
    empty
  }
ws_handNotes =
  [
    a:documentation [
      "contains one or more "
      ns1:code [ "<handNote>" ]
      " elements documenting the different hands identified within the source texts. [11.3.2.1. Document Hands]"
    ]
  ]
  element handNotes { ws_handNote+, ws_att.global.attributes, empty }

ws_handShift =
  ## (handwriting shift) marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. [11.3.2.1. Document Hands]
  element handShift {
    empty,
    ws_att.global.attributes,
    ws_att.handFeatures.attributes,
    [
      a:documentation [
        "indicates a "
        ns1:code [ "<handNote>" ]
        " element describing the hand concerned."
      ]
    ]
    attribute new { xsd:anyURI }?,
    empty
  }

ws_am =
  ## (abbreviation marker) contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. [11.3.1.2. Abbreviation and Expansion]
  element am {
    (text | ws_model.gLike | ws_model.pPart.transcriptional)*,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.editLike.attributes,
    empty
  }

ws_space =
  ## (space) indicates the location of a significant space in the text. [11.4.1. Space]
  element space {
    (ws_model.descLike | ws_model.certLike)*,
    ws_att.global.attribute.xmlid,
    ws_att.global.attribute.n,
    ws_att.global.attribute.xmllang,
    ws_att.global.attribute.xmlbase,
    ws_att.global.attribute.xmlspace,
    ws_att.global.rendition.attribute.rend,
    ws_att.global.rendition.attribute.style,
    ws_att.global.rendition.attribute.rendition,
    ws_att.global.linking.attribute.corresp,
    ws_att.global.linking.attribute.sameAs,
    ws_att.global.linking.attribute.next,
    ws_att.global.linking.attribute.prev,
    ws_att.global.change.attribute.change,
    ws_att.global.responsibility.attribute.cert,
    ws_att.global.source.attribute.source,
    ws_att.typed.attributes,
    ws_att.dimensions.attributes,
    ## (responsible party) (responsible party) indicates the individual responsible for identifying and measuring the space
    attribute resp {
      list { xsd:anyURI+ }
    }?,
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      ## the space is horizontal.
      "horizontal" | ## the space is vertical.
        "vertical"
    }?,
    empty
  }

ws_subst =
  ## (substitution) groups one or more deletions (or surplus text) with one or more additions when the combination is to be regarded as a single intervention in the text. [11.3.1.5. Substitutions]
  element subst {
    ((ws_add | ws_surplus | ws_del | ws_model.milestoneLike)+)
    >> sch:pattern [
         id = "wwp-store-subst-substContents1-constraint-assert-50"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:subst"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "child::tei:add and (child::tei:del or child::tei:surplus)"
             "\x{a}" ~
             "                  "
             sch:name [ ]
             " must have at least one child add and at least one child del or surplus"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    ws_att.global.attributes,
    ws_att.transcriptional.attributes,
    ws_att.dimensions.attributes,
    empty
  }

ws_substJoin =
  ## (substitution join) identifies a series of possibly fragmented additions, deletions, or other revisions on a manuscript that combine to make up a single intervention in the text [11.3.1.5. Substitutions]
  element substJoin {
    (ws_model.descLike | ws_model.certLike)*,
    ws_att.global.attributes,
    ws_att.pointing.attributes,
    ws_att.transcriptional.attributes,
    ws_att.dimensions.attributes,
    empty
  }

ws_supplied =
  ## (supplied) signifies text supplied by the transcriber or editor for any reason; for example because the original cannot be read due to physical damage, or because of an obvious omission by the author or scribe. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element supplied {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.editLike.attributes,
    ws_att.dimensions.attributes,
    attribute reason {
      ## the original page has been damaged through tearing, folding, creasing, foxing, fire or water damage, etc.
      "damaged" | ## for cases where the reproduction of the source document causes illegiblity but we have reason to believe the original is still legible (i.e. photocopies with insufficient contrast, smearing, edges cut off during filming, underexposure, etc.)
        "flawed-reproduction" | ## the original page is intact but the text is illegible due to poorly inked type, patches applied to the original page surface, partial deletion, etc.
        "obscured" | ## Anything not covered by the above values.
        "other"
    },
    empty
  }

ws_surplus =
  ## (surplus) marks text present in the source which the editor believes to be superfluous or redundant. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element surplus {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.editLike.attributes,
    ws_att.dimensions.attributes,
    ## one or more words indicating why this text is believed to be superfluous, e.g. repeated, interpolated etc.
    attribute reason {
      list {
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
      }
    }?,
    empty
  }

ws_line =
  ## contains the transcription of a topographic line in the source document [11.2.2. Embedded Transcription]
  element line {
    (text | ws_model.global | ws_model.gLike | ws_model.linePart)*,
    ws_att.typed.attributes,
    ws_att.global.attributes,
    ws_att.coordinated.attributes,
    ws_att.written.attributes,
    empty
  }

ws_listTranspose =
  ## supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. [11.3.4.5. Transpositions]
  element listTranspose {
    (ws_desc*, ws_transpose+), ws_att.global.attributes, empty
  }

ws_metamark =
  ## contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. [11.3.4.2. Metamarks]
  element metamark {
    ws_macro.specialPara,
    ws_att.spanning.attributes,
    ws_att.global.attributes,
    ## describes the function (for example status, insertion, deletion, transposition) of the metamark.
    attribute function {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
    }?,
    ## identifies one or more elements to which the metamark applies.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }

ws_mod =
  ## represents any kind of modification identified within a single document. [11.3.4.1. Generic Modification]
  element mod {
    ws_macro.paraContent,
    ws_att.global.attributes,
    ws_att.transcriptional.attributes,
    ws_att.typed.attributes,
    ws_att.spanning.attributes,
    ws_att.dimensions.attributes,
    empty
  }

ws_redo =
  ## indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. [11.3.4.4. Confirmation, Cancellation, and Reinstatement of Modifications]
  element redo {
    empty,
    ws_att.global.attributes,
    ws_att.spanning.attributes,
    ws_att.transcriptional.attributes,
    ws_att.dimensions.attributes,
    ## points to one or more elements representing the interventions which are being reasserted.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }

ws_transpose =
  ## describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined. [11.3.4.5. Transpositions]
  element transpose {
    (ws_ptr, ws_ptr, ws_ptr*), ws_att.global.attributes, empty
  }

ws_undo =
  ## indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. [11.3.4.4. Confirmation, Cancellation, and Reinstatement of Modifications]
  element undo {
    empty,
    ws_att.global.attributes,
    ws_att.spanning.attributes,
    ws_att.transcriptional.attributes,
    ws_att.dimensions.attributes,
    ## points to one or more elements representing the interventions which are to be reverted or undone.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
ws_translator =
  [
    a:documentation [
      "contains the name (typically encoded in "
      ns1:code [ "<persName>" ]
      " or "
      ns1:code [ "<orgName>" ]
      ") of the entity that translated the bibliograhic item from one natural language to another."
    ]
  ]
  element translator {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.naming.attributes,
    empty
  }
ws_docAuthorization =
  [
    a:documentation [
      "contains a formal statement authorizing the publication of a work; differs from "
      ns1:code [ "<imprimatur>" ]
      " because FIXME ."
    ]
  ]
  element docAuthorization {
    ws_macro.paraContent, ws_att.global.attributes, empty
  }

ws_elision =
  ## marks cases in which material is excerpted in a quotation or other textual representation within the source text.
  element elision {
    (ws_model.global | ws_macro.xtext)+,
    ws_att.global.attributes,
    ws_att.typed.attributes,
    ws_att.dimensions.attributes,
    empty
  }
ws_acrostics =
  [
    a:documentation [
      "Container that occurs in "
      ns1:code [ "<hyperDiv>" ]
      " and holds one or more "
      ns1:code [ "<acrostic>" ]
      " elements."
    ]
  ]
  element acrostics { ws_acrostic+, ws_att.global.attributes, empty }
ws_acrostic =
  [
    a:documentation [
      "a derived element that contains the word or phrase (including any appropriate phrase-level encoding like "
      ns1:code [ "<persName>" ]
      ") that are spelled by the initial letters of a passage (e.g., the first letter of each lineof a stanza or poem)."
    ]
  ]
  element acrostic {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    [
      a:documentation [
        "points to the parent element (e.g., an "
        ns1:code [ "<lg>" ]
        ") that contains the elements of which the first letter of each make up the acrostic."
      ]
    ]
    attribute target { xsd:anyURI },
    ## Idunno
    attribute components {
      list { xsd:anyURI, xsd:anyURI, xsd:anyURI* }
    }?,
    empty
  }
ws_anagrams =
  [
    a:documentation [
      "Container that occurs in "
      ns1:code [ "<hyperDiv>" ]
      " and holds one or more "
      ns1:code [ "<anagram>" ]
      " elements."
    ]
  ]
  element anagrams { ws_anagram+, ws_att.global.attributes, empty }

ws_anagram =
  ## points to 2 or more textual elements to indicate they are anagrams of each other, OR points to a single textual element to indicate said element is an anagram of its content
  element anagram {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.pointing.attribute.targetLang,
    ws_att.pointing.attribute.evaluate,
    ## points to an element of which the current element is (roughly) an anagram, or points to 2 or more elements whose content are (roughly) anagrams of each other
    attribute target {
      list { xsd:anyURI+ }
    }
    >> sch:pattern [
         id =
           "wwp-store-anagram-target-one_ptr_iff_content-constraint-rule-49"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "anagram[normalize-space(.) eq '']"
           "\x{a}" ~
           "               "
           sch:let [
             name = "targets"
             value = "tokenize( normalize-space( @target ),' ')"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count( $targets ) gt 1"
             "An empty ＜anagram＞ element should point to 2 or more targets"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "anagram[normalize-space(.) ne '']"
           "\x{a}" ~
           "               "
           sch:let [
             name = "targets"
             value = "tokenize( normalize-space( @target ),' ')"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count( $targets ) eq 1"
             "An ＜anagram＞ element that contains an anagram should point to only 1 target"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }
ws_adds =
  [
    a:documentation [
      "Container that occurs in "
      ns1:code [ "<hyperDiv>" ]
      " and holds one or more "
      ns1:code [ "<add>" ]
      " elements."
    ]
  ]
  element adds { ws_add+, ws_att.global.attributes, empty }
ws_notes =
  [
    a:documentation [
      "Container that occurs in "
      ns1:code [ "<hyperDiv>" ]
      " and holds one or more "
      ns1:code [ "<note>" ]
      " elements."
    ]
  ]
  element notes { ws_note+, ws_att.global.attributes, empty }

ws_mcr =
  ## (meaningful change in rendition) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made, other than there is some meaning present.
  element mcr { ws_macro.paraContent, ws_att.global.attributes, empty }

ws_hyperDiv =
  ## (hyper division) Those things that are part of the textual content of the document, or directly related to it, but do not fit into the front matter, body, or back matter.
  element hyperDiv {
    ws_castList?,
    ws_linkGrp?,
    ws_altGrp?,
    ws_acrostics?,
    ws_anagrams?,
    ws_adds?,
    (ws_notes?)
    >> sch:pattern [
         id =
           "wwp-store-hyperDiv-adds_in_adds_have_note-constraint-rule-51"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:adds/tei:add/child::*"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "self::wwp:note"
             "An ＜add＞ inside ＜adds＞ inside the ＜hyperDiv＞ should not have any children other than ＜note＞ (and there is a ＜"
             sch:name [ ]
             "＞ here)."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
  }

ws_advertisement =
  ## A section of text, typically in the backmatter, that advertises other books by the same author, publisher, bookseller, etc.
  element advertisement {
    (ws_model.common | ws_model.global | ws_model.biblPart)*,
    ws_att.global.attributes,
    empty
  }

ws_unknown =
  ## used to indicate a passage about which the proper encoding is not known to the encoder.
  element unknown {
    (text)*,
    ws_att.global.attributes,
    ws_att.ascribed.attributes,
    ws_att.typed.attributes,
    attribute desc {
      list {
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }+
      }
    }?,
    empty
  }
ws_docSale =
  [
    a:documentation [
      "(document sales information) used to encode commercial transaction infromation (e.g., price) as appears in a "
      ns1:code [ "<titleBlock>" ]
      "."
    ]
  ]
  element docSale {
    ws_macro.specialPara, ws_att.global.attributes, empty
  }
ws_att.structuralCategorization.attributes =
  ws_att.structuralCategorization.attribute.subtype,
  ws_att.structuralCategorization.attribute.type
ws_att.structuralCategorization.attribute.subtype =
  ## provides a sub-categorization of the element, if needed
  attribute subtype {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S}|⸿)+" }
  }?

ws_att.structuralCategorization.attribute.type =
  attribute type {
    ## An act in a dramatic text.
    "act" | ## An advertisement for a printed work or other product.
      "advert" | ## A short passage at the start of a document or section giving a prose description of its contents.
      "argument" | ## A major structural component of a long work, identified explicitly in the text as a book.
      "book" | ## A formal calendar; a document or document section identifying itself as a calendar
      "calendar" | ## A list of characters in a dramatic text
      "castlist" | ## A chapter, typically in a prose document 
      "chapter" | ## A short inscription, typically at the end of a book or manuscript, containing the title, printer, date and place of printing, etc.
      "colophon" | ## Any section of the back matter that does not carry a more specific designation; includes afterwords, epilogues, codas, etc.
      "concluding" | ## A section that is identified explicitly as a confession in a text that uses this as a main structural division.
      "confession" | ## A table of contents.
      "contents" | ## A section describing corrections to be made to the document.
      "corrigenda" | ## A dramatic text.
      "drama" | ## A portion of a drama other than a prologue, act, scene, or epilogue.
      "dramaPart" | ## A dedication.
      "ded" | ## A statement indicating that the document's printing was officially authorized.
      "docAuthorization" | ## A section containing endnotes for the document.
      "endnotes" | ## An entry in a document that is organized as a log or diary with dated entries.
      "entry" | ## A short quotation at the start of a document or section, often accompanied by an attribution.
      "epigraph" | ## A short concluding section, usually of a dramatic or fictional work.
      "epilogue" | ## A short prose non-fiction document.
      "essay" | ## A section that is identified explicitly as an examination in a text that uses this as a main structural division.
      "examination" | ## A portrait or other image (usually of the author, usually full page) printed at the front of a document. 
      "frontispiece" | ## An alphabetical listing of the topics in a document, usually with accompanying page references
      "index" | ## A formal indication (usually on the title page or in the front matter) that the document has received official license to be printed.
      "imprimatur" | ## Any document in epistolary form, i.e. addressed by a sender to a recipient.
      "letter" | ## A section that is described explicitly as a meditation in a document that uses this as a main structural division.
      "meditation" | ## An embedded narrative.
      "narrative" | ## A text intended to be nonfiction consisting primarily of prose.
      "nonfictionProse" | ## A novel.
      "novel" | ## A portion of a novel.
      "novelPart" | ## A major component of a work, containing further subdivisions.
      "part" | ## A formal plea to an authority.
      "petition" | "placeholder" | ## A poem.
      "poem" | ## A group of two or more poems under a common heading.
      "poemGroup" | ## A prayer.
      "prayer" | ## A section of the front matter that does not carry a more specific designation.
      "prefatory" | ## An opening section of a literary work (typically drama or poetry). 
      "prologue" | ## A recipe in a cookbook.
      "recipe" | ## A scene in a dramatic text 
      "scene" | ## A generic section of a larger work.
      "section" | ## A section described as a speech or public lecture, in a document that uses this as a main structural division.
      "speech" | ## A generic subdivision of a section.
      "subsection" | ## A timeline. 
      "timeline" | ## A short treatise in pamphlet form often on a religious subject.
      "tract" | ## A text component whose genre has not been determined. 
      "undetermined" | ## A single printed volume in a multi-volume work. 
      "volume"
  }?
sch:pattern [
  id =
    "wwp-store-att.structuralCategorization-value-of-div-not-text-constraint-rule-52"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "wwp:text"
    "\x{a}" ~
    "         "
    sch:report [
      test =
        "@type = ('act',                                            'advert',                                            'argument',                                            'book',                                            'calendar',                                            'castlist',                                            'chapter',                                            'colophon',                                            'concluding',                                            'confession',                                            'contents',                                            'corrigenda',                                            'ded',                                            'docAuthorization',                                            'dramaPart',                                            'endnotes',                                            'entry',                                            'epigraph',                                            'epilogue',                                            'frontispiece',                                            'index',                                            'imprimatur',                                            'novelPart',                                            'placeholder',                                            'prefatory',                                            'prologue',                                            'scene',                                            'section',                                            'subsection',                                            'timeline')"
      'warning: the "'
      sch:value-of [ select = "@type" ]
      '" value of @type is not intended to be used on ＜text＞.'
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id =
    "wwp-store-att.structuralCategorization-value-of-div-not-body-constraint-rule-53"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "wwp:body"
    "\x{a}" ~
    "         "
    sch:report [
      test =
        "@type = ('advert',                                            'argument',                                            'book',                                            'calendar',                                            'castlist',                                            'chapter',                                            'colophon',                                            'concluding',                                            'contents',                                            'corrigenda',                                            'ded',                                            'docAuthorization',                                            'endnotes',                                            'entry',                                            'epigraph',                                            'epilogue',                                            'frontispiece',                                            'index',                                            'imprimatur',                                            'novel',                                            'part',                                            'prefatory',                                            'prologue',                                            'scene',                                            'section',                                            'subsection',                                            'timeline',                                            'volume')"
      'warning: the "'
      sch:value-of [ select = "@type" ]
      '" value of @type is not intended to be used on ＜body＞.'
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]

ws_regMe =
  ## (regularize me) Canonical abbreviation, citation, or reference flagged for automated regularization.
  element regMe {
    ws_macro.phraseSeq,
    ws_att.global.attributes,
    ws_att.canonical.attributes,
    empty
  }

ws_format =
  ## contains the named format of a printed item
  element format {
    "broadsheet"
    | "duodecimo"
    | "folio"
    | "half-sheet"
    | "octavo"
    | "quarto"
    | "unknown"
  }
ws_model.noteTop =
  ws_model.headLike | ws_model.labelLike | ws_ref | ws_opener
ws_model.notePart =
  ws_model.segLike
  | ws_model.biblLike
  | ws_model.listLike
  | ws_model.noteLike
  | ws_model.stageLike
  | ws_model.divPart
  | ws_model.attributable
  | ws_castList
  | ws_floatingText
ws_model.noteBottom = ws_trailer | ws_byline | ws_closer
ws_vuji =
  [
    a:documentation [
      "shorthand for "
      ns1:code [ "<orig>" ]
      " and "
      ns1:code [ "<reg>" ]
      " (in "
      ns1:code [ "<choice>" ]
      ") for VUJI phenomena"
    ]
  ]
  element vuji {
    ("v"
     | "V"
     | "u"
     | "U"
     | "j"
     | "J"
     | "i"
     | "I"
     | "vv"
     | "VV"
     | "Vv"),
    ws_att.global.attributes,
    empty
  }

ws_include =
  ## The W3C XInclude element
  element xi:include {
    ws_fallback?,
    ws_att.global.attributes,
    ## pointer to the resource being included
    attribute href { xsd:anyURI }?,
    [ a:defaultValue = "xml" ]
    attribute parse {
      "xml" | "text"
    }?,
    attribute xpointer { xsd:string }?,
    attribute encoding { xsd:string }?,
    attribute accept { xsd:string }?,
    attribute accept-charset { xsd:string }?,
    attribute accept-language { xsd:string }?,
    empty
  }

ws_fallback =
  ## Wrapper for fallback elements if an XInclude fails
  element xi:fallback { anyElement-fallback }
start = ws_teiCorpus | ws_TEI | ws_text | ws_body | ws_div
sch:ns [ prefix = "TEI" uri = "http://www.tei-c.org/ns/1.0" ]
sch:ns [
  prefix = "tei"
  uri = "http://www.wwp.northeastern.edu/ns/textbase"
]
sch:ns [
  prefix = "wwp"
  uri = "http://www.wwp.northeastern.edu/ns/textbase"
]
sch:ns [ prefix = "xi" uri = "http://www.w3.org/2001/XInclude" ]
sch:pattern [
  id = "LessThan3InitialCharsDropped"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "*[ matches( @rend,'class\s*\(#DIC\)') ]"
    "\x{a}" ~
    "         "
    sch:let [
      name = "len"
      value =
        "if ( .//wwp:sic | .//wwp:corr )                                 then max((                                   string-length( string-join(.//wwp:sic/normalize-space(), '') ),                                   string-length(string-join( .//wwp:corr/normalize-space(), ''))                                   ))                                 else string-length( normalize-space(.) )"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "$len lt 3"
      "\x{a}" ~
      "                  A dropped initial capital is typically only 1 or at\x{a}" ~
      "                  most 2 characters long; this one is "
      sch:value-of [ select = "$len" ]
      " characters long.\x{a}" ~
      "                "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "concrete_rend_keyword_checker"
  is-a = "abstract_rendition_keyword_checker"
  "\x{a}" ~
  "      "
  sch:param [ name = "rendLadderContext" value = "wwp:rendition" ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "concrete_rendition_keyword_checker"
  is-a = "abstract_rendition_keyword_checker"
  "\x{a}" ~
  "      "
  sch:param [ name = "rendLadderContext" value = "wwp:*/@rend" ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "abstract_rendition_keyword_checker"
  abstract = "true"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "$rendLadderContext"
    "\x{a}" ~
    "         "
    sch:let [ name = "me" value = "normalize-space(.)" ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "myself"
      value = "replace( replace( $me, ' ?\) ?',')'), ' ?\( ?','(')"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "I"
      value = "replace( replace( $myself,'\\\)','⸩'), '\\\(','⸨')"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "we"
      value =
        "replace( $I,                                         'be(stow|queath)                                         \(                                           \(([a-z-]+\([^)]*\))+\)                                           \(([A-Za-z][A-Za-z0-9._-]*[ ]?)+\)                                         \)',                                         '','x')"
    ]
    "\x{a}" ~
    "         "
    sch:let [ name = "us" value = "tokenize( $we, '\([^)]*\)')" ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "every $ego in $us satisfies (                              $ego = ('align', 'bestow', 'border', 'braced', 'bracing', 'break', 'case', 'columns', 'face', 'fill', 'first-indent', 'indent', 'place', 'pos', 'post', 'pre', 'rotate', 'slant', 'space-above', 'sub', 'sup', 'underline', 'underscore')                             or                             $ego = ('', 'class', 'inverted', 'myAnchor', 'right-indent', 'rotate', 'rotate-y')                             )"
      "\x{a}" ~
      "                  I parsed the "
      sch:value-of [
        select =
          "if (self::wwp:rendition) then concat('content of ＜rendition＞ #', (@xml:id,count( preceding::wwp:rendition)+1)[1]) else concat('@rend of a ＜', local-name(..),'＞' )"
      ]
      ",\x{a}" ~
      '                  "'
      sch:value-of [ select = "." ]
      '", into the keywords "'
      sch:value-of [
        select = "for $ego in ($us) return concat('{',$ego,'}')"
      ]
      '",\x{a}' ~
      "                  at least one of which is not a proper keyword.\x{a}" ~
      "                "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "wwp-store-TR_and_OT_nums-constraint-assert-53"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:"
    "\x{a}" ~
    "         "
    sch:let [
      name = "hdr"
      value =
        "substring-before( normalize-space( /wwp:TEI/wwp:teiHeader/@xml:id ),'.hdr')"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "idno"
      value =
        "normalize-space( /wwp:TEI/wwp:teiHeader/wwp:fileDesc/wwp:publicationStmt/wwp:idno[@type eq 'WWP'] )"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "textID"
      value = "normalize-space( /wwp:TEI/wwp:text/@xml:id )"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "sourceDescs"
      value = "/wwp:TEI/wwp:teiHeader/wwp:fileDesc/wwp:sourceDesc"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "sourceDesc"
      value =
        "               if ( count( $sourceDescs ) eq 1 )                 then $sourceDescs                 else $sourceDescs[ not( @default eq 'false') ]                 "
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "source"
      value = "normalize-space( $sourceDesc/@n )"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "matches( $hdr,   '^TR[0-9]{5}(\.[0-9]{2})?$')"
      "TEI Header ID is not in correct format"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "matches( $idno,  '^TR[0-9]{5}(\.[0-9]{2})?$')"
      "WWP idno is not in correct format"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "matches( $textID,'^TR[0-9]{5}(\.[0-9]{2})?$')"
      "\x{a}" ~
      "            "
      tei:att [ "xml:id" ]
      " of "
      tei:gi [ "text" ]
      " is not a proper TR number"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "matches( $source,'^OT[0-9]{5}(\.[0-9]{2})?$')"
      "\x{a}" ~
      "            "
      tei:att [ "n" ]
      " of "
      tei:gi [ "sourceDesc" ]
      " is not a proper OT number"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "$idno eq $textID                               and                               substring( $idno, 3 ) eq substring( $source, 3 )                               and                               $idno eq $hdr"
      "TR and OT numbers do not all match."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "wwp-store-filenames_match-constraint-assert-58"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:"
    "\x{a}" ~
    "         "
    sch:let [
      name = "myfn"
      value = "tokenize( document-uri(/),'/')[last()]"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "mybase"
      value = "substring-before( $myfn, '.xml')"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "URLidno"
      value =
        "/wwp:TEI/wwp:teiHeader/wwp:fileDesc/wwp:publicationStmt/wwp:idno[@type eq 'URL']"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "URLidnobase"
      value =
        "substring-before( tokenize( $URLidno,'/')[last()],'.html')"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "svnIDnot"
      value =
        "exists( /comment()[contains( ., concat('$','Id','$') ) ] )"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "SVN"
      value =
        "tokenize( normalize-space( /comment()[contains( .,'$Id:') ] ), ' ')"
    ]
    "\x{a}" ~
    "         "
    sch:let [ name = "SVNfn" value = "$SVN[2]" ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "SVNbase"
      value = "substring-before( $SVNfn,'.xml')"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "matches( $URLidno,'^https?://www\.wwp\.northeastern\.edu/texts/[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.html$')"
      "URL idno is not in correct format"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "if (normalize-space($myfn) eq '') then true() else $URLidnobase eq $mybase"
      "URL idno does not match filename"
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "count( $SVN ) eq 0  and  not( $svnIDnot )"
      "Subversion 'Id' keyword comment not found"
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "count( $SVN ) eq 0  and  $svnIDnot"
      "Subversion 'Id' keyword has not been substituted"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "if (normalize-space($myfn) eq '') then true() else $SVNfn eq $myfn"
      "Subversion 'Id' filename does not match actual filename"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "$SVNbase eq $URLidnobase"
      "Subversion 'Id' filename does not match URL idno"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "wwp-store-corresp-not-point-to-self-constraint-rule-47"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "*[ @corresp ]"
    "\x{a}" ~
    "         "
    sch:let [ name = "ptr2me" value = "concat('#', @xml:id )" ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "tokenize( normalize-space( @corresp ),' ') = $ptr2me"
      "ERROR: the "
      sch:value-of [ select = "name()" ]
      " element with id="
      sch:value-of [ select = "@xml:id" ]
      " corresponds to itself"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "wwp-store-shyTests-constraint-rule-48"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "text()[contains(.,'­')]"
    "\x{a}" ~
    "         "
    sch:let [ name = "len" value = "43" ]
    "\x{a}" ~
    "         "
    sch:let [ name = "me" value = "normalize-space(.)" ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "ellipsis"
      value = "if (string-length($me) > $len) then '…' else ''"
    ]
    "\x{a}" ~
    "         "
    sch:let [
      name = "snippet"
      value = "concat( substring( $me, 1, $len), $ellipsis )"
    ]
    "\x{a}" ~
    "         "
    sch:report [
      test = "matches(.,'­.*­')"
      "“"
      sch:value-of [ select = "$snippet" ]
      "”: two shy!"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "matches(.,'­\s*$')"
      "“"
      sch:value-of [ select = "$snippet" ]
      "”: non-whitespace after shy!"
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "following::text()"
      "“"
      sch:value-of [ select = "$snippet" ]
      "”: nothing follows shy!"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
